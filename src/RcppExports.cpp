// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <RcppArmadillo.h>
#include <Rcpp.h>

using namespace Rcpp;

// warningMessage
std::string warningMessage(int cond);
RcppExport SEXP _remstimate_warningMessage(SEXP condSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type cond(condSEXP);
    rcpp_result_gen = Rcpp::wrap(warningMessage(cond));
    return rcpp_result_gen;
END_RCPP
}
// errorMessage
std::string errorMessage(int cond);
RcppExport SEXP _remstimate_errorMessage(SEXP condSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type cond(condSEXP);
    rcpp_result_gen = Rcpp::wrap(errorMessage(cond));
    return rcpp_result_gen;
END_RCPP
}
// compute_statsCpp
arma::cube compute_statsCpp(const arma::vec& effects, const arma::mat& edgelist, const arma::mat& riskset, int start, int stop, const Rcpp::List& values, const arma::vec& scaling, const arma::vec& memory_value, const arma::vec& with_type, const arma::mat& event_weights, const arma::vec& equal_val);
RcppExport SEXP _remstimate_compute_statsCpp(SEXP effectsSEXP, SEXP edgelistSEXP, SEXP risksetSEXP, SEXP startSEXP, SEXP stopSEXP, SEXP valuesSEXP, SEXP scalingSEXP, SEXP memory_valueSEXP, SEXP with_typeSEXP, SEXP event_weightsSEXP, SEXP equal_valSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::vec& >::type effects(effectsSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type edgelist(edgelistSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type riskset(risksetSEXP);
    Rcpp::traits::input_parameter< int >::type start(startSEXP);
    Rcpp::traits::input_parameter< int >::type stop(stopSEXP);
    Rcpp::traits::input_parameter< const Rcpp::List& >::type values(valuesSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type scaling(scalingSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type memory_value(memory_valueSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type with_type(with_typeSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type event_weights(event_weightsSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type equal_val(equal_valSEXP);
    rcpp_result_gen = Rcpp::wrap(compute_statsCpp(effects, edgelist, riskset, start, stop, values, scaling, memory_value, with_type, event_weights, equal_val));
    return rcpp_result_gen;
END_RCPP
}
// nLoglik
double nLoglik(const arma::vec& pars, const arma::cube& stats, const arma::mat& event_binary, const arma::vec& interevent_time);
RcppExport SEXP _remstimate_nLoglik(SEXP parsSEXP, SEXP statsSEXP, SEXP event_binarySEXP, SEXP interevent_timeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::vec& >::type pars(parsSEXP);
    Rcpp::traits::input_parameter< const arma::cube& >::type stats(statsSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type event_binary(event_binarySEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type interevent_time(interevent_timeSEXP);
    rcpp_result_gen = Rcpp::wrap(nLoglik(pars, stats, event_binary, interevent_time));
    return rcpp_result_gen;
END_RCPP
}
// remDerivatives
Rcpp::List remDerivatives(const arma::vec& pars, const arma::cube& stats, const arma::mat& event_binary, const arma::vec& interevent_time);
RcppExport SEXP _remstimate_remDerivatives(SEXP parsSEXP, SEXP statsSEXP, SEXP event_binarySEXP, SEXP interevent_timeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::vec& >::type pars(parsSEXP);
    Rcpp::traits::input_parameter< const arma::cube& >::type stats(statsSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type event_binary(event_binarySEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type interevent_time(interevent_timeSEXP);
    rcpp_result_gen = Rcpp::wrap(remDerivatives(pars, stats, event_binary, interevent_time));
    return rcpp_result_gen;
END_RCPP
}
// lpd
double lpd(arma::vec pars, arma::mat stats, arma::uvec event, double interevent_time);
RcppExport SEXP _remstimate_lpd(SEXP parsSEXP, SEXP statsSEXP, SEXP eventSEXP, SEXP interevent_timeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::vec >::type pars(parsSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type stats(statsSEXP);
    Rcpp::traits::input_parameter< arma::uvec >::type event(eventSEXP);
    Rcpp::traits::input_parameter< double >::type interevent_time(interevent_timeSEXP);
    rcpp_result_gen = Rcpp::wrap(lpd(pars, stats, event, interevent_time));
    return rcpp_result_gen;
END_RCPP
}
// getUniqueVectors
arma::mat getUniqueVectors(arma::cube stats);
RcppExport SEXP _remstimate_getUniqueVectors(SEXP statsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::cube >::type stats(statsSEXP);
    rcpp_result_gen = Rcpp::wrap(getUniqueVectors(stats));
    return rcpp_result_gen;
END_RCPP
}
// computeTimes
arma::vec computeTimes(const arma::mat& unique_vectors_stats, const arma::uword& M, const arma::cube& stats, const arma::vec& intereventTime);
RcppExport SEXP _remstimate_computeTimes(SEXP unique_vectors_statsSEXP, SEXP MSEXP, SEXP statsSEXP, SEXP intereventTimeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type unique_vectors_stats(unique_vectors_statsSEXP);
    Rcpp::traits::input_parameter< const arma::uword& >::type M(MSEXP);
    Rcpp::traits::input_parameter< const arma::cube& >::type stats(statsSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type intereventTime(intereventTimeSEXP);
    rcpp_result_gen = Rcpp::wrap(computeTimes(unique_vectors_stats, M, stats, intereventTime));
    return rcpp_result_gen;
END_RCPP
}
// computeOccurrencies
arma::vec computeOccurrencies(const Rcpp::DataFrame& edgelist, const arma::umat& risksetMatrix, const arma::uword& M, const arma::mat& unique_vectors_stats, const arma::cube& stats);
RcppExport SEXP _remstimate_computeOccurrencies(SEXP edgelistSEXP, SEXP risksetMatrixSEXP, SEXP MSEXP, SEXP unique_vectors_statsSEXP, SEXP statsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Rcpp::DataFrame& >::type edgelist(edgelistSEXP);
    Rcpp::traits::input_parameter< const arma::umat& >::type risksetMatrix(risksetMatrixSEXP);
    Rcpp::traits::input_parameter< const arma::uword& >::type M(MSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type unique_vectors_stats(unique_vectors_statsSEXP);
    Rcpp::traits::input_parameter< const arma::cube& >::type stats(statsSEXP);
    rcpp_result_gen = Rcpp::wrap(computeOccurrencies(edgelist, risksetMatrix, M, unique_vectors_stats, stats));
    return rcpp_result_gen;
END_RCPP
}
// remDerivativesFast
Rcpp::List remDerivativesFast(const arma::vec& pars, const arma::vec& times_r, const arma::vec& occurrencies_r, const arma::mat& unique_vectors_stats);
RcppExport SEXP _remstimate_remDerivativesFast(SEXP parsSEXP, SEXP times_rSEXP, SEXP occurrencies_rSEXP, SEXP unique_vectors_statsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::vec& >::type pars(parsSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type times_r(times_rSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type occurrencies_r(occurrencies_rSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type unique_vectors_stats(unique_vectors_statsSEXP);
    rcpp_result_gen = Rcpp::wrap(remDerivativesFast(pars, times_r, occurrencies_r, unique_vectors_stats));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_remstimate_warningMessage", (DL_FUNC) &_remstimate_warningMessage, 1},
    {"_remstimate_errorMessage", (DL_FUNC) &_remstimate_errorMessage, 1},
    {"_remstimate_compute_statsCpp", (DL_FUNC) &_remstimate_compute_statsCpp, 11},
    {"_remstimate_nLoglik", (DL_FUNC) &_remstimate_nLoglik, 4},
    {"_remstimate_remDerivatives", (DL_FUNC) &_remstimate_remDerivatives, 4},
    {"_remstimate_lpd", (DL_FUNC) &_remstimate_lpd, 4},
    {"_remstimate_getUniqueVectors", (DL_FUNC) &_remstimate_getUniqueVectors, 1},
    {"_remstimate_computeTimes", (DL_FUNC) &_remstimate_computeTimes, 4},
    {"_remstimate_computeOccurrencies", (DL_FUNC) &_remstimate_computeOccurrencies, 5},
    {"_remstimate_remDerivativesFast", (DL_FUNC) &_remstimate_remDerivativesFast, 4},
    {NULL, NULL, 0}
};

RcppExport void R_init_remstimate(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
