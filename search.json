[{"path":"https://tilburgnetworkgroup.github.io/remstimate/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"MIT License","title":"MIT License","text":"Copyright (c) 2024 remstimate authors Permission hereby granted, free charge, person obtaining copy software associated documentation files (“Software”), deal Software without restriction, including without limitation rights use, copy, modify, merge, publish, distribute, sublicense, /sell copies Software, permit persons Software furnished , subject following conditions: copyright notice permission notice shall included copies substantial portions Software. SOFTWARE PROVIDED “”, WITHOUT WARRANTY KIND, EXPRESS IMPLIED, INCLUDING LIMITED WARRANTIES MERCHANTABILITY, FITNESS PARTICULAR PURPOSE NONINFRINGEMENT. EVENT SHALL AUTHORS COPYRIGHT HOLDERS LIABLE CLAIM, DAMAGES LIABILITY, WHETHER ACTION CONTRACT, TORT OTHERWISE, ARISING , CONNECTION SOFTWARE USE DEALINGS SOFTWARE.","code":""},{"path":"https://tilburgnetworkgroup.github.io/remstimate/articles/remstimate.html","id":"estimation-approaches-frequentist-and-bayesian","dir":"Articles","previous_headings":"","what":"Estimation approaches: Frequentist and Bayesian","title":"Modeling relational event networks with remstimate","text":"order optimize model parameters, available approaches resort either Frequentist theory Bayesian theory. remstimate package provides several optimization methods estimate model parameters: two Frequentist approaches Maximum Likelihood Estimation (\"MLE\") Adaptive Gradient Descent (\"GDADAMAX\") respectively second-order first-order optimization algorithms; two Bayesian approaches Bayesian Sampling Importance Resampling (\"BSIR\") Hamiltonian Monte Carlo (\"HMC\"). provide concise overview two approaches, consider time-ordered sequence \\(M\\) relational events, \\(E_{t_M}=(e_1,\\ldots,e_M)\\), array statistics (explanatory variables) \\(X\\), \\(\\boldsymbol{\\beta}\\) vector model parameters describing effect explanatory variables, want estimate. explanation follows valid tie-oriented actor-oriented modeling frameworks. aim Frequentist approaches find set parameters \\(\\boldsymbol{\\hat{\\beta}}\\) maximizes value likelihood function \\(\\mathscr{L}(\\boldsymbol{\\beta}; E_{t_M},X)\\), \\[     \\boldsymbol{\\hat{\\beta}}=\\mathop{\\mathrm{arg\\,max}}_{\\boldsymbol{\\beta}}\\{\\mathscr{L}(\\boldsymbol{\\beta};E_{t_M},X)\\} \\] Whereas, aim Bayesian approaches find set parameters \\(\\boldsymbol{\\hat{\\beta}}\\) maximizes posterior probability model proportional likelihood observed data prior distribution assumed model parameters, \\[p(\\boldsymbol{\\beta}|E_{t_M},X) \\propto \\mathscr{L}(\\boldsymbol{\\beta}; E_{t_M},X) p(\\boldsymbol{\\beta})\\] \\(p(\\boldsymbol{\\beta})\\) prior distribution model parameters , instance, can assumed multivariate normal distribution, \\[ \\boldsymbol{\\beta} \\sim \\mathcal{N}(\\boldsymbol{\\mu_{0}},\\Sigma_{0}) \\] parameters \\((\\boldsymbol{\\mu_{0}},\\Sigma_{0})\\) summarizing prior information researcher may distributon \\(\\boldsymbol{\\beta}\\).","code":""},{"path":"https://tilburgnetworkgroup.github.io/remstimate/articles/remstimate.html","id":"lets-get-started-loading-the-remstimate-package","dir":"Articles","previous_headings":"","what":"Let’s get started (loading the remstimate package)","title":"Modeling relational event networks with remstimate","text":"starting, want first load remstimate package. laod turn remify remstats, need respectively processing relational event history calculating/processing statistics specified model: tutorial, going use main functions remify remstats setting arguments default values. However, suggest user read documentation two packages vignettes order get familiar additional functionalities (e.g., possibility defining time-varying risk set, calculating statistics specific time window, many others).","code":"library(remstimate)"},{"path":[]},{"path":"https://tilburgnetworkgroup.github.io/remstimate/articles/remstimate.html","id":"tie-oriented-modeling-framework","dir":"Articles","previous_headings":"Modeling frameworks","what":"Tie-Oriented Modeling framework","title":"Modeling relational event networks with remstimate","text":"tie-oriented modeling, refer seminal paper Butts (2008), author introduces likelihood function relational event model (REM). Relational events modeled tie-oriented approach along waiting time (measured). time variable available, model reduces Cox proportional-hazard survival model (Cox 1972).","code":""},{"path":"https://tilburgnetworkgroup.github.io/remstimate/articles/remstimate.html","id":"the-likelihood-function","dir":"Articles","previous_headings":"Modeling frameworks > Tie-Oriented Modeling framework","what":"The likelihood function","title":"Modeling relational event networks with remstimate","text":"Consider time-ordered sequence \\(M\\) relational events, \\(E_{t_M}=(e_1,\\ldots,e_M)\\), event \\(e_{m}\\) sequence described 4-tuple \\((s_{m},r_{m},c_{m},t_{m})\\), respectively sender, receiver, type time event. Furthermore, \\(N\\) number actors network. simplicity, assume actors network can sender receiver relational event; \\(C\\) number event types, may describe sentiment interaction (e.g., praise colleague, conflict countries). set \\(C=1\\) simplicity, also means work events without sentiment (least available data); \\(P\\) number sufficient statistics (explanatory variables); likelihood function models relational event sequence tie-oriented approach , \\[ \\mathscr{L}(\\boldsymbol{\\beta}; E_{t_M},X)= \\prod_{m=1}^{M}{\\Bigg[\\lambda(e_{m},t_{m},\\boldsymbol{\\beta})\\prod_{e\\\\mathcal{R}}^{}{\\exp{\\left\\lbrace-\\lambda(e,t_{m},\\boldsymbol{\\beta})\\left(t_m-t_{m-1}\\right)\\right\\rbrace} }}\\Bigg] \\] : \\(\\boldsymbol{\\beta}\\) vector parameters interest. parameters describe effect sufficient statistics (explanatory variables) event rate; \\(\\boldsymbol{\\beta}^{T}X_{[m,e,.]} = \\sum_{p=1}^{P}{\\beta_p X_{[m,e,p]}}\\) linear predictor event \\(e\\) time \\(t_{m}\\). object \\(X\\) three dimensional array number rows equal number unique time points (events) sequence (see vignette(package=\"remstats\") information statistics calculated per unique time point per observed event), number columns equal number dyadic events (\\(D\\)), (see vignette(topic=\"remify\",package=\"remify\") information quantify number dyadic events), number slices equal number variables linear predictor (\\(P\\)). \\(e_m\\) refers event occurred time \\(t_m\\) \\(e\\) refers event risk time \\(t_m\\); \\(\\mathcal{R}\\) describes set events risk time point (including also occurring event). case, risk set assumed full risk set (see vignette(topic=\"riskset\",package=\"remify\") information alternative definitions risk set), means possible dyadic events risk time point; \\((t_{m}-t_{m-1})\\) waiting time two subsequent events. time occurrence events available know order occurrence, likelihood function reduces Cox proportional-hazard survival model (Cox 1972), \\[ \\mathscr{L}(\\boldsymbol{\\beta}; E_{t_M},X)= \\prod_{m=1}^{M}{\\Bigg[\\frac{\\lambda(e_{m},t_{m},\\boldsymbol{\\beta})}{\\sum_{e\\\\mathcal{R}}^{}{\\lambda(e,t_{m},\\boldsymbol{\\beta})}}}\\Bigg] \\]","code":""},{"path":"https://tilburgnetworkgroup.github.io/remstimate/articles/remstimate.html","id":"a-toy-example-on-the-tie-oriented-modeling-framework","dir":"Articles","previous_headings":"Modeling frameworks > Tie-Oriented Modeling framework > The likelihood function","what":"A toy example on the tie oriented modeling framework","title":"Modeling relational event networks with remstimate","text":"order get started optimization methods available remstimate, consider data tie_data, list containing simulated relational event sequence events generated following tie-oriented process. going model event rate \\(\\lambda\\) event event \\(e\\) risk time \\(t_{m}\\) : \\[\\begin{align}\\lambda(e,t_{m},\\boldsymbol{\\beta}) = \\exp{\\left\\lbrace\\beta_{intercept} + \\beta_{\\text{indegreeSender}}\\text{indegreeSender}(s_e,t_{m}) + \\\\ +\\beta_{\\text{inertia}}\\text{inertia}(s_e,r_e,t_{m}) + \\beta_{\\text{reciprocity}}\\text{reciprocity}(s_e,r_e,t_{m})\\right\\rbrace}\\end{align}\\] Furthermore, know true parameters quantifying effect statistics (name subscript next \\(\\beta\\)) used generation event sequence : \\[\\begin{bmatrix} \\beta_{intercept} \\\\ \\beta_{\\text{indegreeSender}} \\\\ \\beta_{\\text{inertia}} \\\\ \\beta_{\\text{reciprocity}} \\end{bmatrix} = \\begin{bmatrix} -5.0 \\\\ 0.01 \\\\ -0.1 \\\\ 0.03\\end{bmatrix}\\] parameters also available object within list, tie_data$true.pars.","code":"# setting `ncores` to 1 (the user can change this parameter) ncores <- 1L  # loading data data(tie_data)  # true parameters' values tie_data$true.pars ##      intercept indegreeSender        inertia    reciprocity  ##          -5.00           0.01          -0.10           0.03 # processing the event sequence with 'remify' tie_reh <- remify::remify(edgelist = tie_data$edgelist, model = \"tie\")  # summary of the (processed) relational event network summary(tie_reh) ## Relational Event Network ## (processed for tie-oriented modeling): ##  > events = 100 ##  > actors = 5 ##  > riskset = full ##  > directed = TRUE ##  > ordinal = FALSE ##  > weighted = FALSE ##  > time length ~ 807  ##  > interevent time  ##       >> minimum ~ 0.1832  ##       >> maximum ~ 63.6192"},{"path":"https://tilburgnetworkgroup.github.io/remstimate/articles/remstimate.html","id":"estimating-a-model-with-remstimate-in-3-steps","dir":"Articles","previous_headings":"Modeling frameworks > Tie-Oriented Modeling framework > The likelihood function","what":"Estimating a model with remstimate() in 3 steps","title":"Modeling relational event networks with remstimate","text":"estimation model can summarized three steps: First, define linear predictor variables interest, using statistics available within remstats (statistics calculated user can also supplied remstats::remstats()). Second, calculate statistics defined linear predictor function remstats::remstats() remstats package. Finally, ready run optimization methods function remstimate::remstimate(). sections , show estimation parameters using methods available also show usage output methods available remstimate object.","code":"# specifying linear predictor (with `remstats`) using a 'formula' tie_model <- ~ 1 + remstats::indegreeSender() +                remstats::inertia() + remstats::reciprocity() # calculating statistics (with `remstats`) tie_stats <- remstats::remstats(reh = tie_reh, tie_effects = tie_model)  # the 'tomstats' 'remstats' object tie_stats ## Relational Event Network Statistics ## > Model: tie-oriented ## > Computation method: per time point ## > Dimensions: 100 time points x 20 dyads x 4 statistics ## > Statistics: ##   >> 1: baseline ##   >> 2: indegreeSender ##   >> 3: inertia ##   >> 4: reciprocity # for example the method \"MLE\" remstimate::remstimate(reh = tie_reh,                           stats =  tie_stats,                           method = \"MLE\",                           ncores = ncores) ## Relational Event Model (tie oriented)  ##  ## Coefficients: ##  ##       baseline indegreeSender        inertia    reciprocity  ##    -4.91045403     0.04349023    -0.20150573    -0.05213701  ##  ## Null deviance: 1216.739  ## Residual deviance: 1210.625  ## AIC: 1218.625 AICC: 1219.046 BIC: 1229.045"},{"path":[]},{"path":"https://tilburgnetworkgroup.github.io/remstimate/articles/remstimate.html","id":"maximum-likelihood-estimation-mle","dir":"Articles","previous_headings":"Modeling frameworks > Tie-Oriented Modeling framework > Frequentist approaches","what":"Maximum Likelihood Estimation (MLE)","title":"Modeling relational event networks with remstimate","text":"","code":"tie_mle <- remstimate::remstimate(reh = tie_reh,                           stats = tie_stats,                           ncores = ncores,                           method = \"MLE\",                           WAIC = TRUE, # setting WAIC computation to TRUE                           nsimWAIC = 100) # number of draws for the computation of the WAIC set to 100"},{"path":"https://tilburgnetworkgroup.github.io/remstimate/articles/remstimate.html","id":"print","dir":"Articles","previous_headings":"Modeling frameworks > Tie-Oriented Modeling framework > Frequentist approaches","what":"print( )","title":"Modeling relational event networks with remstimate","text":"","code":"# printing the 'remstimate' object tie_mle ## Relational Event Model (tie oriented)  ##  ## Coefficients: ##  ##       baseline indegreeSender        inertia    reciprocity  ##    -4.91045403     0.04349023    -0.20150573    -0.05213701  ##  ## Null deviance: 1216.739  ## Residual deviance: 1210.625  ## AIC: 1218.625 AICC: 1219.046 BIC: 1229.045 WAIC: 1219.669"},{"path":"https://tilburgnetworkgroup.github.io/remstimate/articles/remstimate.html","id":"summary","dir":"Articles","previous_headings":"Modeling frameworks > Tie-Oriented Modeling framework > Frequentist approaches","what":"summary( )","title":"Modeling relational event networks with remstimate","text":"column named \\(Pr(>|z|)\\), usual test z value parameter. column named \\(Pr(=0|x)\\), approximation posterior probability parameter equal 0.","code":"# summary of the 'remstimate' object summary(tie_mle) ## Relational Event Model (tie oriented)  ##  ## Call: ## ~1 + remstats::indegreeSender() + remstats::inertia() + remstats::reciprocity() ##  ##  ## Coefficients (MLE with interval likelihood): ##  ##                  Estimate   Std. Err    z value Pr(>|z|) Pr(=0) ## baseline        -4.910454   0.187555 -26.181372   0.0000 <2e-16 ## indegreeSender   0.043490   0.036449   1.193170   0.2328 0.8307 ## inertia         -0.201506   0.088154  -2.285831   0.0223 0.4231 ## reciprocity     -0.052137   0.098237  -0.530728   0.5956 0.8968 ## Null deviance: 1216.739 on 100 degrees of freedom ## Residual deviance: 1210.625 on 96 degrees of freedom ## Chi-square: 6.11449 on 4 degrees of freedom, asymptotic p-value 0.1907597  ## AIC: 1218.625 AICC: 1219.046 BIC: 1229.045 WAIC: 1219.669"},{"path":"https://tilburgnetworkgroup.github.io/remstimate/articles/remstimate.html","id":"information-critieria","dir":"Articles","previous_headings":"Modeling frameworks > Tie-Oriented Modeling framework > Frequentist approaches","what":"Information Critieria","title":"Modeling relational event networks with remstimate","text":"","code":"# aic aic(tie_mle) ## [1] 1218.625 # aicc aicc(tie_mle) ## [1] 1219.046 # bic  bic(tie_mle) ## [1] 1229.045 #waic  waic(tie_mle) ## [1] 1219.669"},{"path":"https://tilburgnetworkgroup.github.io/remstimate/articles/remstimate.html","id":"diagnostics","dir":"Articles","previous_headings":"Modeling frameworks > Tie-Oriented Modeling framework > Frequentist approaches","what":"diagnostics( )","title":"Modeling relational event networks with remstimate","text":"","code":"# diagnostics tie_mle_diagnostics <- diagnostics(object = tie_mle, reh = tie_reh, stats = tie_stats)"},{"path":"https://tilburgnetworkgroup.github.io/remstimate/articles/remstimate.html","id":"plot","dir":"Articles","previous_headings":"Modeling frameworks > Tie-Oriented Modeling framework > Frequentist approaches","what":"plot( )","title":"Modeling relational event networks with remstimate","text":"","code":"# plot plot(x = tie_mle, reh  = tie_reh, diagnostics = tie_mle_diagnostics)"},{"path":"https://tilburgnetworkgroup.github.io/remstimate/articles/remstimate.html","id":"adaptive-gradient-descent-optimization-gdadamax","dir":"Articles","previous_headings":"Modeling frameworks > Tie-Oriented Modeling framework > Frequentist approaches","what":"Adaptive Gradient Descent Optimization (GDADAMAX)","title":"Modeling relational event networks with remstimate","text":"","code":"tie_gd <- remstimate::remstimate(reh = tie_reh,                         stats =  tie_stats,                         ncores = ncores,                         method = \"GDADAMAX\",                         epochs = 200L, # number of iterations for the Gradient-Descent algorithm                         WAIC = TRUE, # setting WAIC computation to TRUE                         nsimWAIC = 100) # number of draws for the computation of the WAIC set to 100      # print  tie_gd ## Relational Event Model (tie oriented)  ##  ## Coefficients: ##  ##       baseline indegreeSender        inertia    reciprocity  ##   -5.022630364   -0.008719889    0.027182180   -0.028030095  ##  ## Null deviance: 1216.739  ## Residual deviance: 1217.914  ## AIC: 1225.914 AICC: 1226.335 BIC: 1236.334 WAIC: 1225.534 # diagnostics tie_gd_diagnostics <- diagnostics(object = tie_gd, reh = tie_reh, stats = tie_stats) # plot # plot(x = tie_gd, reh  = tie_reh, diagnostics = tie_gd_diagnostics) # uncomment to use the plot function"},{"path":[]},{"path":"https://tilburgnetworkgroup.github.io/remstimate/articles/remstimate.html","id":"bayesian-sampling-importance-resampling-bsir","dir":"Articles","previous_headings":"Modeling frameworks > Tie-Oriented Modeling framework > Bayesian approaches","what":"Bayesian Sampling Importance Resampling (BSIR)","title":"Modeling relational event networks with remstimate","text":"","code":"library(mvnfast) # loading package for fast simulation from a multivariate Student t distribution priormvt <- mvnfast::dmvt # defining which distribution we want to use from the 'mvnfast' package tie_bsir <- remstimate::remstimate(reh = tie_reh,                         stats =  tie_stats,                         ncores = ncores,                         method = \"BSIR\",                         nsim = 200L, # 200 draws from the posterior distribution                         prior = priormvt, # defining prior here, prior parameters follow below                         mu = rep(0,dim(tie_stats)[3]), # prior mu value                         sigma = diag(dim(tie_stats)[3])*1.5, # prior sigma value                         df = 1, # prior df value                         log = TRUE, # requiring log density values from the prior,                         seed = 23029, # set a seed only for reproducibility purposes                         WAIC = TRUE, # setting WAIC computation to TRUE                         nsimWAIC = 100 # number of draws for the computation of the WAIC set to 100                              )  # summary  summary(tie_bsir) ## Relational Event Model (tie oriented)  ##  ## Call: ## ~1 + remstats::indegreeSender() + remstats::inertia() + remstats::reciprocity() ##  ##  ## Posterior Modes (BSIR with interval likelihood): ##  ##                Post.Mode   Post.SD     Q2.5%      Q50%  Q97.5% Pr(=0|x) ## baseline       -4.940502  0.186072 -5.277344 -4.886659 -4.5644   <2e-16 ## indegreeSender  0.038982  0.035994 -0.031385  0.042822  0.1095   0.8476 ## inertia        -0.203187  0.094298 -0.382460 -0.203889 -0.0326   0.4953 ## reciprocity    -0.017419  0.093554 -0.234598 -0.061255  0.1357   0.9076 ## Log posterior: -615.9267 WAIC: 1219.248 # diagnostics tie_bsir_diagnostics <- diagnostics(object = tie_bsir, reh = tie_reh, stats = tie_stats) # plot # plot(x = tie_bsir, reh  = tie_reh, diagnostics = tie_bsir_diagnostics) # uncomment to use the plot function"},{"path":"https://tilburgnetworkgroup.github.io/remstimate/articles/remstimate.html","id":"hamiltonian-monte-carlo-hmc","dir":"Articles","previous_headings":"Modeling frameworks > Tie-Oriented Modeling framework > Bayesian approaches","what":"Hamiltonian Monte Carlo (HMC)","title":"Modeling relational event networks with remstimate","text":"Q2.5%, Q50% Q97.5% respectively percentile 2.5, median (50th percentile) percentile 97.5.","code":"tie_hmc <- remstimate::remstimate(reh = tie_reh,                         stats =  tie_stats,                         method = \"HMC\",                         ncores = ncores,                         nsim = 200L, # 200 draws to generate per each chain                         nchains = 4L, # 4 chains to generate                         burnin = 200L, # burnin length is 200                         thin = 2L, # thinning size set to 2 (the final length of the chains will be 100)                         seed = 23029, # set a seed only for reproducibility purposes                         WAIC = TRUE, # setting WAIC computation to TRUE                         nsimWAIC = 100 # number of draws for the computation of the WAIC set to 100                              )  # summary  summary(tie_hmc) ## Relational Event Model (tie oriented)  ##  ## Call: ## ~1 + remstats::indegreeSender() + remstats::inertia() + remstats::reciprocity() ##  ##  ## Posterior Modes (HMC with interval likelihood): ##  ##                  Post.Mode     Post.SD       Q2.5%        Q50%  Q97.5% ## baseline       -4.89176602  0.10098116 -5.13667338 -4.91842653 -4.7228 ## indegreeSender  0.04216992  0.02128111 -0.00011355  0.04485789  0.0848 ## inertia        -0.20584522  0.05187206 -0.29432727 -0.19865069 -0.0960 ## reciprocity    -0.05412344  0.05675886 -0.15335845 -0.05335163  0.0670 ##                 Pr(=0|x) ## baseline       < 2.2e-16 ## indegreeSender  0.584017 ## inertia         0.003791 ## reciprocity     0.863885 ## Log posterior: -605.3317 WAIC: 1213.59 # diagnostics tie_hmc_diagnostics <- diagnostics(object = tie_hmc, reh = tie_reh, stats = tie_stats) # plot (histograms and trace plot have highest posterior density intervals dashed lines in blue and posterior estimate in red) plot(x = tie_hmc, reh  = tie_reh, diagnostics = tie_hmc_diagnostics)"},{"path":"https://tilburgnetworkgroup.github.io/remstimate/articles/remstimate.html","id":"actor-oriented-modeling-framework","dir":"Articles","previous_headings":"Modeling frameworks","what":"Actor-Oriented Modeling framework","title":"Modeling relational event networks with remstimate","text":"actor-oriented modeling, refer modeling framework introduced Stadtfeld Block (2017), process realization relational event described two steps: first actor going initiate next interaction becomes “sender” future event; choice “receiver” future event operated active “sender” step 1. first step modelled via rate model (similar REM), waiting times modelled along sequence senders observed relational events. second step modelled via multinomial discrete choice model, model choice receiver next event conditional active sender first step. Therefore, two models can described two separate likelihood functions set parameters. parameters model describe effect explanatory variables (network dynamics available exogenous statistics) two distinct processes. estimation model parameters model can carried separately reason, user can also provide remstats object containing statistics either one two models.","code":""},{"path":"https://tilburgnetworkgroup.github.io/remstimate/articles/remstimate.html","id":"the-likelihood-function-1","dir":"Articles","previous_headings":"Modeling frameworks > Actor-Oriented Modeling framework","what":"The likelihood function","title":"Modeling relational event networks with remstimate","text":"Consider time-ordered sequence \\(M\\) relational events, \\(E_{t_M}=(e_1,\\ldots,e_M)\\), event \\(e_{m}\\) sequence described 3-tuple \\((s_{m},r_{m},t_{m})\\) (exclude information event type), respectively sender, receiver, time event. Furthermore, consider \\(N\\) number actors network. simplicity, assume actors network can sender receiver relational event (.e. full risk set, see vignette(topic=\"riskset\",package=\"remify\") information alternative definitions risk set) use index \\(n\\) indicate actor set \\(\\mathcal{R}\\) actors risk, thus \\(n \\\\left\\lbrace 1,2,\\ldots,N\\right\\rbrace\\).","code":""},{"path":"https://tilburgnetworkgroup.github.io/remstimate/articles/remstimate.html","id":"sender-activity-rate-model","dir":"Articles","previous_headings":"Modeling frameworks > Actor-Oriented Modeling framework > The likelihood function","what":"Sender activity rate model","title":"Modeling relational event networks with remstimate","text":"likelihood function models sender activity : \\[ \\mathscr{L}_{\\text{sender model}}(\\boldsymbol{\\theta}; E_{t_M},X)= \\prod_{m=1}^{M}{\\Bigg[\\tau(s_{m},t_{m},\\boldsymbol{\\theta})\\prod_{n \\\\mathcal{R}}^{}{\\exp{\\left\\lbrace-\\tau(n,t_{m},\\boldsymbol{\\theta})\\left(t_m-t_{m-1}\\right)\\right\\rbrace} }}\\Bigg] \\] : \\(\\boldsymbol{\\theta}\\) vector parameters interest. parameters describe effect sufficient statistics (explanatory variables) activity rate sender; \\(\\boldsymbol{\\theta}^{T}X_{[m,n,.]} = \\sum_{p=1}^{P}{\\theta_p X_{[m,n,p]}}\\) linear predictor sender \\(n\\) time \\(t_{m}\\). object \\(X\\) three dimensional array number rows equal number unique time points (events) sequence (see vignette(package=\"remstats\") information statistics calculated per unique time point per observed event), number columns equal number actors sequence (\\(N\\)), number slices equal number variables linear predictor (\\(P\\)). \\(s_m\\) refers sender event observed time \\(t_m\\) \\(n\\) refers actor can sender interaction time \\(t_m\\); \\(\\mathcal{R}\\) describes set actors risk initiating interaction, becoming future sender relational event (set also includes actor sender event time \\(t_m\\)). tutorial, risk set sender model assumed full risk set, actors network can “sender” relational event time point event sequence; \\((t_{m}-t_{m-1})\\) waiting time two subsequent relational events. time occurrence events available know order occurrence, likelihood function sender model reduces Cox proportional-hazard survival model (Cox 1972), \\[ \\mathscr{L}_{\\text{sender model}}(\\boldsymbol{\\theta}; E_{t_M},X)= \\prod_{m=1}^{M}{\\Bigg[\\frac{\\tau(s_{m},t_{m},\\boldsymbol{\\theta})}{\\sum_{n\\\\mathcal{R}}^{}{\\tau(n,t_{m},\\boldsymbol{\\theta})}}}\\Bigg] \\]","code":""},{"path":"https://tilburgnetworkgroup.github.io/remstimate/articles/remstimate.html","id":"receiver-choice-model","dir":"Articles","previous_headings":"Modeling frameworks > Actor-Oriented Modeling framework > The likelihood function","what":"Receiver choice model","title":"Modeling relational event networks with remstimate","text":"likelihood function models receiver choice : \\[ \\mathscr{L}_{\\text{receiver model}}(\\boldsymbol{\\beta}; E_{t_M},X)=\\prod_{m=1}^{M}{\\Bigg[\\frac{\\exp{\\left\\lbrace\\boldsymbol{\\beta}^{T}U_{[m,r_m,.]}\\right\\rbrace}}{\\sum_{n \\\\mathcal{R} \\setminus \\left\\lbrace s_m \\right\\rbrace }^{}{\\exp{\\left\\lbrace\\boldsymbol{\\beta}^{T}U_{[m,n,.]}\\right\\rbrace}}}\\Bigg]} \\] : \\(\\boldsymbol{\\beta}\\) vector \\(K\\) parameters interest. parameters describe effect sufficient statistics (explanatory variables) choice receiver; \\(\\boldsymbol{\\beta}^{T}U_{[m,n,.]} = \\sum_{k=1}^{K}{\\beta_k U_{[m,n,k]}}\\) linear predictor event time \\(t_{m}\\) sender \\(s_m\\) receiver possible receivers, \\(n\\) \\(n \\neq s_m\\). object \\(U\\) three dimensional array number rows equal number events sequence (see vignette(package=\"remstats\") information statistics calculated per unique time point per observed event), number columns equal number actors (\\(N\\)), number slices equal number variables linear predictor (\\(K\\)). \\(r_m\\) refers receiver observed time \\(t_m\\) \\(n\\) refers actor can receiver event time \\(t_m\\) (excluding sender time \\(t_m\\)) \\(\\mathcal{R}\\) describes set actors risk becoming receiver next interaction. case receiver model, risk set composition changes time time point actor currently sender also receiver interaction excluded set potential receivers. tutorial, risk set reiceiver model assumed full risk set actors (excluding current sender time point) can “receiver” time point.","code":""},{"path":"https://tilburgnetworkgroup.github.io/remstimate/articles/remstimate.html","id":"a-toy-example-on-the-actor-oriented-modeling-framework","dir":"Articles","previous_headings":"Modeling frameworks > Actor-Oriented Modeling framework > The likelihood function","what":"A toy example on the actor oriented modeling framework","title":"Modeling relational event networks with remstimate","text":"Consider data ao_data, list containing simulated relational event sequence events generated following two-steps process described section . going model sender activity rate receiver choice : \\[ \\tau(n,t_{m},\\boldsymbol{\\theta}) = \\exp{\\left\\lbrace \\theta_{\\text{intercept}}  + \\theta_{indegreeSender}\\text{indegreeSender}(n,t_{m})\\right\\rbrace} \\] \\[ \\exp{\\left\\lbrace \\boldsymbol{\\beta}^{T}U_{[m,n,.]} \\right\\rbrace} = \\exp{\\left\\lbrace \\beta_{\\text{inertia}}\\text{inertia}(s_m,n,t_{m})  + \\beta_{\\text{reciprocity}}\\text{reciprocity}(s_m,n,t_{m})\\right\\rbrace}\\] Furthermore, know true parameters quantifying effect statistics (name subscript next model parameters \\(\\theta\\) \\(\\beta\\)) used generation event sequence : sender model, \\[\\begin{bmatrix} \\theta_{intercept} \\\\ \\theta_{\\text{indegreeSender}} \\end{bmatrix} = \\begin{bmatrix} -5.0 \\\\ 0.01 \\end{bmatrix}\\] receiver model \\[\\begin{bmatrix}  \\beta_{\\text{inertia}} \\\\ \\beta_{\\text{reciprocity}} \\end{bmatrix} = \\begin{bmatrix} -0.1 \\\\ 0.03\\end{bmatrix}\\] parameters also available object within list, ao_data$true.pars.","code":"# setting `ncores` to 1 (the user can change this parameter) ncores <- 1L  # loading data data(ao_data)  # true parameters' values ao_data$true.pars ## $rate_model ##      intercept indegreeSender  ##          -5.00           0.01  ##  ## $choice_model ##     inertia reciprocity  ##       -0.10        0.03 # processing event sequence with 'remify' ao_reh <- remify::remify(edgelist = ao_data$edgelist, model = \"actor\")  # summary of the relational event network summary(ao_reh) ## Relational Event Network ## (processed for actor-oriented modeling): ##  > events = 100 ##  > actors = 5 ##  > riskset = full ##  > directed = TRUE ##  > ordinal = FALSE ##  > weighted = FALSE ##  > time length ~ 2654  ##  > interevent time  ##       >> minimum ~ 0.8542  ##       >> maximum ~ 167.3494"},{"path":"https://tilburgnetworkgroup.github.io/remstimate/articles/remstimate.html","id":"estimating-a-model-with-remstimate-in-3-steps-1","dir":"Articles","previous_headings":"Modeling frameworks > Actor-Oriented Modeling framework > The likelihood function","what":"Estimating a model with remstimate() in 3 steps","title":"Modeling relational event networks with remstimate","text":"estimation model can summarized three steps: First, define linear predictor variables interest, using statistics available within remstats (statistics calculated user can also supplied remstats::remstats()). Second, calculate statistics defined linear predictor function remstats::remstats() remstats package. Finally, ready run optimization methods function remstimate::remstimate(). sections , already done tie-oriented framework, show estimation parameters using methods available also show usage output methods available remstimate object.","code":"# specifying linear predictor (for rate and choice model, with `remstats`) rate_model <- ~ 1 + remstats::indegreeSender() choice_model <- ~ remstats::inertia() + remstats::reciprocity() # calculating statistics (with `remstats`) ao_stats <- remstats::remstats(reh = ao_reh, sender_effects = rate_model, receiver_effects = choice_model)  # the 'aomstats' 'remstats' object ao_stats ## Relational Event Network Statistics ## > Model: actor-oriented ## > Computation method: per time point ## > Sender model: ##   >> Dimensions: 100 time points x 5 actors x 2 statistics ##   >> Statistics: ##       >>> 1: baseline ##       >>> 2: indegreeSender ## > Receiver model: ##   >> Dimensions: 100 events x 5 actors x 2 statistics ##   >> Statistics: ##       >>> 1: inertia ##       >>> 2: reciprocity # for example the method \"MLE\" remstimate::remstimate(reh = ao_reh,                           stats =  ao_stats,                           method = \"MLE\",                           ncores = ncores) ## Relational Event Model (actor oriented)  ##  ## Coefficients rate model **for sender**: ##  ##       baseline indegreeSender  ##   -4.806201529   -0.008363321  ##  ## Null deviance: 1177.625  ## Residual deviance: 1177.348  ## AIC: 1181.348 AICC: 1181.472 BIC: 1186.558 ##  ## -------------------------------------------------------------------------------- ##  ## Coefficients choice model **for receiver**: ##  ##     inertia reciprocity  ## -0.03250837  0.01828748  ##  ## Null deviance: 2.772589  ## Residual deviance: 277.0551  ## AIC: 281.0551 AICC: 281.1789 BIC: 286.2655"},{"path":[]},{"path":"https://tilburgnetworkgroup.github.io/remstimate/articles/remstimate.html","id":"maximum-likelihood-estimation-mle-1","dir":"Articles","previous_headings":"Modeling frameworks > Actor-Oriented Modeling framework > Frequentist approaches","what":"Maximum Likelihood Estimation (MLE)","title":"Modeling relational event networks with remstimate","text":"","code":"ao_mle <- remstimate::remstimate(reh = ao_reh,                         stats = ao_stats,                         ncores = ncores,                         method = \"MLE\",                         WAIC = TRUE, # setting WAIC computation to TRUE                         nsimWAIC = 100) # number of draws for the computation of the WAIC set to 100"},{"path":"https://tilburgnetworkgroup.github.io/remstimate/articles/remstimate.html","id":"print-1","dir":"Articles","previous_headings":"","what":"Modeling relational event networks with remstimate","title":"Modeling relational event networks with remstimate","text":"","code":"# printing the 'remstimate' object  ao_mle ## Relational Event Model (actor oriented)  ##  ## Coefficients rate model **for sender**: ##  ##       baseline indegreeSender  ##   -4.806201529   -0.008363321  ##  ## Null deviance: 1177.625  ## Residual deviance: 1177.348  ## AIC: 1181.348 AICC: 1181.472 BIC: 1186.558 WAIC: 1181.781  ##  ## -------------------------------------------------------------------------------- ##  ## Coefficients choice model **for receiver**: ##  ##     inertia reciprocity  ## -0.03250837  0.01828748  ##  ## Null deviance: 2.772589  ## Residual deviance: 277.0551  ## AIC: 281.0551 AICC: 281.1789 BIC: 286.2655 WAIC: 280.5819"},{"path":"https://tilburgnetworkgroup.github.io/remstimate/articles/remstimate.html","id":"summary-1","dir":"Articles","previous_headings":"Modeling frameworks > Actor-Oriented Modeling framework > Frequentist approaches","what":"summary( )","title":"Modeling relational event networks with remstimate","text":"","code":"# summary of the 'remstimate' object summary(ao_mle) ## Relational Event Model (actor oriented)  ##  ## Call rate model **for sender**: ##  ##  ~1 + remstats::indegreeSender() ##  ##  ## Coefficients rate model (MLE with interval likelihood): ##  ##                   Estimate    Std. Err     z value Pr(>|z|) Pr(=0) ## baseline        -4.8062015   0.1832563 -26.2266709      0.0 <2e-16 ## indegreeSender  -0.0083633   0.0159467  -0.5244534      0.6 0.8971 ## Null deviance: 1177.625 on 100 degrees of freedom ## Residual deviance: 1177.348 on 98 degrees of freedom ## Chi-square: 0.2770484 on 2 degrees of freedom, asymptotic p-value 0.8706422  ## AIC: 1181.348 AICC: 1181.472 BIC: 1186.558 WAIC: 1181.781  ## --------------------------------------------------------------------------------  ##  ## Call choice model **for receiver**: ##  ##  ~remstats::inertia() + remstats::reciprocity() ##  ##  ## Coefficients choice model (MLE with interval likelihood): ##  ##              Estimate  Std. Err   z value Pr(>|z|) Pr(=0) ## inertia     -0.032508  0.077037 -0.421983   0.6730 0.9015 ## reciprocity  0.018287  0.071630  0.255305   0.7985 0.9064 ## Null deviance: 2.772589 on 100 degrees of freedom ## Residual deviance: 277.0551 on 98 degrees of freedom ## Chi-square: -274.2826 on 2 degrees of freedom, asymptotic p-value 1  ## AIC: 281.0551 AICC: 281.1789 BIC: 286.2655 WAIC: 280.5819"},{"path":"https://tilburgnetworkgroup.github.io/remstimate/articles/remstimate.html","id":"information-critieria-1","dir":"Articles","previous_headings":"Modeling frameworks > Actor-Oriented Modeling framework > Frequentist approaches","what":"Information Critieria","title":"Modeling relational event networks with remstimate","text":"","code":"# aic aic(ao_mle) ##   sender model receiver model  ##      1181.3481       281.0551 # aicc aicc(ao_mle) ##   sender model receiver model  ##      1181.4718       281.1789 # bic  bic(ao_mle) ##   sender model receiver model  ##      1186.5584       286.2655 #waic  waic(ao_mle) ##   sender model receiver model  ##      1181.7813       280.5819"},{"path":"https://tilburgnetworkgroup.github.io/remstimate/articles/remstimate.html","id":"diagnostics-1","dir":"Articles","previous_headings":"Modeling frameworks > Actor-Oriented Modeling framework > Frequentist approaches","what":"diagnostics( )","title":"Modeling relational event networks with remstimate","text":"","code":"# diagnostics ao_mle_diagnostics <- diagnostics(object = ao_mle, reh = ao_reh, stats = ao_stats)"},{"path":"https://tilburgnetworkgroup.github.io/remstimate/articles/remstimate.html","id":"plot-1","dir":"Articles","previous_headings":"Modeling frameworks > Actor-Oriented Modeling framework > Frequentist approaches","what":"plot( )","title":"Modeling relational event networks with remstimate","text":"","code":"# plot plot(x = ao_mle, reh  = ao_reh, diagnostics = ao_mle_diagnostics)"},{"path":"https://tilburgnetworkgroup.github.io/remstimate/articles/remstimate.html","id":"adaptive-gradient-descent-optimization-gdadamax-1","dir":"Articles","previous_headings":"Modeling frameworks > Actor-Oriented Modeling framework > Frequentist approaches","what":"Adaptive Gradient Descent Optimization (GDADAMAX)","title":"Modeling relational event networks with remstimate","text":"","code":"ao_gd <- remstimate::remstimate(reh = ao_reh,                         stats =  ao_stats,                         ncores = ncores,                         method = \"GDADAMAX\",                         epochs = 200L, # number of iterations of the Gradient-Descent algorithm                         WAIC = TRUE, # setting WAIC computation to TRUE                         nsimWAIC = 100) # number of draws for the computation of the WAIC set to 100      # print  ao_gd ## Relational Event Model (actor oriented)  ##  ## Coefficients rate model **for sender**: ##  ##       baseline indegreeSender  ##     -0.1688384     -0.1017067  ##  ## Null deviance: 1177.625  ## Residual deviance: 10066.19  ## AIC: 10070.19 AICC: 10070.32 BIC: 10075.4 WAIC: 10287.92  ##  ## -------------------------------------------------------------------------------- ##  ## Coefficients choice model **for receiver**: ##  ##     inertia reciprocity  ## -0.02370260  0.01567611  ##  ## Null deviance: 2.772589  ## Residual deviance: 277.0683  ## AIC: 281.0683 AICC: 281.192 BIC: 286.2787 WAIC: 280.3747 # diagnostics ao_gd_diagnostics <- diagnostics(object = ao_gd, reh = ao_reh, stats = ao_stats) # plot # plot(x = ao_gd, reh  = ao_reh, diagnostics = ao_gd_diagnostics) # uncomment to use the plot function"},{"path":[]},{"path":"https://tilburgnetworkgroup.github.io/remstimate/articles/remstimate.html","id":"bayesian-sampling-importance-resampling-bsir-1","dir":"Articles","previous_headings":"Modeling frameworks > Actor-Oriented Modeling framework > Bayesian approaches","what":"Bayesian Sampling Importance Resampling (BSIR)","title":"Modeling relational event networks with remstimate","text":"","code":"library(mvnfast) # loading package for fast simulation from a multivariate Student t distribution priormvt <- mvnfast::dmvt # defining which distribution we want to use from the 'mvnfast' package ao_bsir <- remstimate::remstimate(reh = ao_reh,                         stats =  ao_stats,                         ncores = ncores,                         method = \"BSIR\",                         nsim = 100L, # 100 draws from the posterior distribution                         prior = list(sender_model = priormvt, receiver_model = priormvt), #  defining prior here, prior parameters follow below                         prior_args = list(sender_model =  list(mu = rep(0,dim(ao_stats$sender_stats)[3]), # prior mu value for sender_model                                                             sigma = diag(dim(ao_stats$sender_stats)[3])*1.5, # prior sigma value for sender_model                                                             df = 1),  # prior df value                                         receiver_model = list(mu = rep(0,dim(ao_stats$receiver_stats)[3]), # prior mu value for receiver_model                                                             sigma = diag(dim(ao_stats$receiver_stats)[3])*1.5, # prior sigma value for receiver_model                                                             df = 1)), # prior df value                         log = TRUE, # requiring log density values from the prior,                         seed = 20929, # set a seed only for reproducibility purposes                         WAIC = TRUE, # setting WAIC computation to TRUE                         nsimWAIC = 100 # number of draws for the computation of the WAIC set to 100                              )  # summary  summary(ao_bsir) ## Relational Event Model (actor oriented)  ##  ## Call rate model **for sender**: ##  ##  ~1 + remstats::indegreeSender() ##  ##  ## Posterior Modes rate model (BSIR with interval likelihood): ##  ##                 Post.Mode    Post.SD      Q2.5%       Q50%  Q97.5% Pr(=0|x) ## baseline       -4.8018252  0.1759390 -5.0995898 -4.7823997 -4.4837   <2e-16 ## indegreeSender -0.0080396  0.0161221 -0.0390818 -0.0071234  0.0230   0.8983 ## Log posterior: -588.6755 WAIC: 1181.684  ## --------------------------------------------------------------------------------  ##  ## Call choice model **for receiver**: ##  ##  ~remstats::inertia() + remstats::reciprocity() ##  ##  ## Posterior Modes choice model (BSIR with interval likelihood): ##  ##              Post.Mode    Post.SD      Q2.5%       Q50% Q97.5% Pr(=0|x) ## inertia     -0.0126845  0.0811262 -0.1744974 -0.0077218 0.1423   0.9081 ## reciprocity  0.0198576  0.0751748 -0.1140912  0.0010799 0.1581   0.9062 ## Log posterior: -138.4584 WAIC: 282.0644 # diagnostics ao_bsir_diagnostics <- diagnostics(object = ao_bsir, reh = ao_reh, stats = ao_stats) # plot (only for the receiver_model, by setting sender_model = NA) # plot(x = ao_bsir, reh  = ao_reh, diagnostics = ao_bsir_diagnostics, sender_model = NA) # uncomment to use the plot function"},{"path":"https://tilburgnetworkgroup.github.io/remstimate/articles/remstimate.html","id":"hamiltonian-monte-carlo-hmc-1","dir":"Articles","previous_headings":"Modeling frameworks > Actor-Oriented Modeling framework > Bayesian approaches","what":"Hamiltonian Monte Carlo (HMC)","title":"Modeling relational event networks with remstimate","text":"","code":"ao_hmc <- remstimate::remstimate(reh = ao_reh,                         stats =  ao_stats,                         method = \"HMC\",                         ncores = ncores,                         nsim = 300L, # 300 draws to generate per each chain                         nchains = 4L, # 4 chains (each one long 200 draws) to generate                         burnin = 300L, # burnin length is 300                         L = 100L, # number of leap-frog steps                         epsilon = 0.1/100, # size of a leap-frog step                         thin = 2L, # thinning size (this will reduce the final length of each chain will be 150)                         seed = 23029, # set a seed only for reproducibility purposes                         WAIC = TRUE, # setting WAIC computation to TRUE                         nsimWAIC = 100 # number of draws for the computation of the WAIC set to 100                              )  # summary  summary(ao_hmc) ## Relational Event Model (actor oriented)  ##  ## Call rate model **for sender**: ##  ##  ~1 + remstats::indegreeSender() ##  ##  ## Posterior Modes rate model (HMC with interval likelihood): ##  ##                 Post.Mode    Post.SD      Q2.5%       Q50%  Q97.5% Pr(=0|x) ## baseline       -4.6587527  0.1024161 -4.8466379 -4.6503193 -4.4549   <2e-16 ## indegreeSender -0.0192776  0.0090939 -0.0372322 -0.0195099 -0.0029   0.5139 ## Log posterior: -599.8593 WAIC: 1179.536  ## --------------------------------------------------------------------------------  ##  ## Call choice model **for receiver**: ##  ##  ~remstats::inertia() + remstats::reciprocity() ##  ##  ## Posterior Modes choice model (HMC with interval likelihood): ##  ##              Post.Mode    Post.SD      Q2.5%       Q50% Q97.5% Pr(=0|x) ## inertia     -0.0328733  0.0440346 -0.1198729 -0.0259082 0.0533   0.8833 ## reciprocity  0.0189472  0.0410635 -0.0669650  0.0092633 0.0905   0.8999 ## Log posterior: -138.5283 WAIC: 278.4279 # diagnostics ao_hmc_diagnostics <- diagnostics(object = ao_hmc, reh = ao_reh, stats = ao_stats) # plot (only for the receiver_model, by setting sender_model = NA) plot(x = ao_hmc, reh  = ao_reh, diagnostics = ao_hmc_diagnostics, sender_model = NA)"},{"path":[]},{"path":"https://tilburgnetworkgroup.github.io/remstimate/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Giuseppe Arena. Author, maintainer. Rumana Lakdawala. Author. Fabio Generoso Vieira. Author. Marlyne Meijerink-Bosman. Contributor. Diana Karimova. Contributor. Mahdi Shafiee Kamalabad. Contributor. Roger Leenders. Contributor. Joris Mulder. Contributor.","code":""},{"path":"https://tilburgnetworkgroup.github.io/remstimate/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Arena G, Lakdawala R, Generoso Vieira F (2024). remstimate: Optimization Frameworks Tie-Oriented Actor-Oriented Relational Event Models. R package version 2.3.11, https://github.com/TilburgNetworkGroup/remstimate.","code":"@Manual{,   title = {remstimate: Optimization Frameworks for Tie-Oriented and Actor-Oriented Relational Event Models},   author = {Giuseppe Arena and Rumana Lakdawala and Fabio {Generoso Vieira}},   year = {2024},   note = {R package version 2.3.11},   url = {https://github.com/TilburgNetworkGroup/remstimate}, }"},{"path":[]},{"path":"https://tilburgnetworkgroup.github.io/remstimate/index.html","id":"optimization-tools-for-relational-event-history-data","dir":"","previous_headings":"remstimate","what":"Optimization Tools for Relational Event History data","title":"Optimization Frameworks for Tie-Oriented and Actor-Oriented Relational Event Models","text":"remstimate package provides set functions perform necessary calculations modeling Relational Event History. can perform tie-oriented well actor-oriented modeling. main function remstimate::remstimate() provides four different estimation methods: \"MLE\", maximizing model likelihood; \"GDADAMAX\", optimization based gradient; \"BSIR\", Bayesian Sampling Importance Resampling; \"HMC\", Hamiltonian Monte Carlo.","code":""},{"path":"https://tilburgnetworkgroup.github.io/remstimate/index.html","id":"installation","dir":"","previous_headings":"remstimate","what":"Installation","title":"Optimization Frameworks for Tie-Oriented and Actor-Oriented Relational Event Models","text":"Install package R CRAN:","code":"install.packages(\"remstimate\") library(remify)"},{"path":"https://tilburgnetworkgroup.github.io/remstimate/index.html","id":"vignettes","dir":"","previous_headings":"remstimate","what":"Vignettes","title":"Optimization Frameworks for Tie-Oriented and Actor-Oriented Relational Event Models","text":"List vignettes available remstimate using: Open vignette specific topic :","code":"vignette(package = \"remstimate\") vignette(topic = \"remstimate\", package = \"remstimate\") # or simply vignette(\"remstimate\")"},{"path":"https://tilburgnetworkgroup.github.io/remstimate/index.html","id":"problems-while-remstimat-ing","dir":"","previous_headings":"remstimate","what":"Problems while remstimat-ing?","title":"Optimization Frameworks for Tie-Oriented and Actor-Oriented Relational Event Models","text":"encounter errors using package, questions answered Vignettes, reporting kind malfunction package, can open issue . opening issue, please, use descriptive title clearly states issue, thorough possible describing issue, provide code snippets can reproduce issue.","code":""},{"path":"https://tilburgnetworkgroup.github.io/remstimate/index.html","id":"funding","dir":"","previous_headings":"remstimate","what":"Funding","title":"Optimization Frameworks for Tie-Oriented and Actor-Oriented Relational Event Models","text":"funder work ERC ERC project number 758791.","code":""},{"path":"https://tilburgnetworkgroup.github.io/remstimate/reference/aic.html","id":null,"dir":"Reference","previous_headings":"","what":"aic — aic","title":"aic — aic","text":"function returns AIC (Akaike's Information Criterion) value 'remstimate' object.","code":""},{"path":"https://tilburgnetworkgroup.github.io/remstimate/reference/aic.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"aic — aic","text":"","code":"aic(object, ...)  # S3 method for remstimate aic(object, ...)"},{"path":"https://tilburgnetworkgroup.github.io/remstimate/reference/aic.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"aic — aic","text":"object remstimate object. ... arguments passed 'aic' method.","code":""},{"path":"https://tilburgnetworkgroup.github.io/remstimate/reference/aic.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"aic — aic","text":"AIC value 'remstimate' object.","code":""},{"path":"https://tilburgnetworkgroup.github.io/remstimate/reference/aic.html","id":"methods-by-class-","dir":"Reference","previous_headings":"","what":"Methods (by class)","title":"aic — aic","text":"aic(remstimate): AIC (Akaike's Information Criterion) value 'remstimate' object","code":""},{"path":"https://tilburgnetworkgroup.github.io/remstimate/reference/aic.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"aic — aic","text":"","code":"# ------------------------------------ # #       tie-oriented model: \"MLE\"      # # ------------------------------------ #  # loading data data(tie_data)  # processing event sequence with remify tie_reh <- remify::remify(edgelist = tie_data$edgelist, model = \"tie\")    # specifying linear predictor tie_model <- ~ 1 +                 remstats::indegreeSender()+                remstats::inertia()+                remstats::reciprocity()   # calculating statistics tie_reh_stats <- remstats::remstats(reh = tie_reh,                                      tie_effects = tie_model)  # running estimation tie_mle <- remstimate::remstimate(reh = tie_reh,                                   stats = tie_reh_stats,                                   method = \"MLE\",                                   ncores = 1)  # AIC aic(tie_mle) # #> [1] 1218.625"},{"path":"https://tilburgnetworkgroup.github.io/remstimate/reference/aicc.html","id":null,"dir":"Reference","previous_headings":"","what":"aicc — aicc","title":"aicc — aicc","text":"function returns AICC (Akaike's Information Corrected Criterion) value 'remstimate' object.","code":""},{"path":"https://tilburgnetworkgroup.github.io/remstimate/reference/aicc.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"aicc — aicc","text":"","code":"aicc(object, ...)  # S3 method for remstimate aicc(object, ...)"},{"path":"https://tilburgnetworkgroup.github.io/remstimate/reference/aicc.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"aicc — aicc","text":"object remstimate object. ... arguments passed 'aicc' method.","code":""},{"path":"https://tilburgnetworkgroup.github.io/remstimate/reference/aicc.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"aicc — aicc","text":"AICC value 'remstimate' object.","code":""},{"path":"https://tilburgnetworkgroup.github.io/remstimate/reference/aicc.html","id":"methods-by-class-","dir":"Reference","previous_headings":"","what":"Methods (by class)","title":"aicc — aicc","text":"aicc(remstimate): AICC (Akaike's Information Corrected Criterion) value 'remstimate' object","code":""},{"path":"https://tilburgnetworkgroup.github.io/remstimate/reference/aicc.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"aicc — aicc","text":"","code":"# ------------------------------------ # #       tie-oriented model: \"MLE\"      # # ------------------------------------ #  # loading data data(tie_data)  # processing event sequence with remify tie_reh <- remify::remify(edgelist = tie_data$edgelist, model = \"tie\")    # specifying linear predictor tie_model <- ~ 1 +                 remstats::indegreeSender()+                remstats::inertia()+                remstats::reciprocity()   # calculating statistics tie_reh_stats <- remstats::remstats(reh = tie_reh,                                      tie_effects = tie_model)  # running estimation tie_mle <- remstimate::remstimate(reh = tie_reh,                                   stats = tie_reh_stats,                                   method = \"MLE\",                                   ncores = 1)  # AICC aicc(tie_mle)  #> [1] 1219.046"},{"path":"https://tilburgnetworkgroup.github.io/remstimate/reference/ao_data.html","id":null,"dir":"Reference","previous_headings":"","what":"Actor-Oriented Relational Event History — ao_data","title":"Actor-Oriented Relational Event History — ao_data","text":"randomly generated sequence relational events 5 actors 100 events. event sequence generated following actor-oriented modeling approach (information algorithm used generation, refer help(topic = remulateActor, package = \"remulate\") ?remulate::remulateActor).","code":""},{"path":"https://tilburgnetworkgroup.github.io/remstimate/reference/ao_data.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Actor-Oriented Relational Event History — ao_data","text":"","code":"data(ao_data)"},{"path":"https://tilburgnetworkgroup.github.io/remstimate/reference/ao_data.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Actor-Oriented Relational Event History — ao_data","text":"ao_data list object containing following objects: edgelist data.frame raw simulated edgelist. columns data.frame : time timestamp indicating time event occurred actor1 actor generated relational event actor2 actor received relational event seed seed value used remulate::remulateActor() generating event sequence true.pars list two vectors named \"rate_model\" \"choice_model\", containing values parameters used generation event sequence","code":""},{"path":"https://tilburgnetworkgroup.github.io/remstimate/reference/ao_data.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Actor-Oriented Relational Event History — ao_data","text":"","code":"# (1) load the data into the workspace data(ao_data)  # (2) process event sequence with \\code{remify} ao_reh <- remify::remify(edgelist = ao_data$edgelist, model = \"actor\")  # (3) define linear predictor and claculate stastistcs with \\code{remstats} package  ## linear predictor for the rate model rate_model <- ~ 1 + remstats::indegreeSender()  ## linear predictror for the choice model choice_model <- ~ remstats::inertia() + remstats::reciprocity()  ## calculate statistics ao_reh_stats <- remstats::remstats(reh = ao_reh, sender_effects = rate_model,  receiver_effects = choice_model)  # (4) estimate model using method = \"MLE\" and print out summary  ## estimate model mle_ao <- remstimate::remstimate(reh = ao_reh, stats = ao_reh_stats, method = \"MLE\")  ## print out a summary of the estimation summary(mle_ao) #> Relational Event Model (actor oriented)  #>  #> Call rate model **for sender**: #>  #> \t~1 + remstats::indegreeSender() #>  #>  #> Coefficients rate model (MLE with interval likelihood): #>  #>                   Estimate    Std. Err     z value Pr(>|z|) Pr(=0) #> baseline        -4.8062015   0.1832563 -26.2266709      0.0 <2e-16 #> indegreeSender  -0.0083633   0.0159467  -0.5244534      0.6 0.8971 #> Null deviance: 1177.625 on 100 degrees of freedom #> Residual deviance: 1177.348 on 98 degrees of freedom #> Chi-square: 0.2770484 on 2 degrees of freedom, asymptotic p-value 0.8706422  #> AIC: 1181.348 AICC: 1181.472 BIC: 1186.558 #> --------------------------------------------------------------------------------  #>  #> Call choice model **for receiver**: #>  #> \t~remstats::inertia() + remstats::reciprocity() #>  #>  #> Coefficients choice model (MLE with interval likelihood): #>  #>              Estimate  Std. Err   z value Pr(>|z|) Pr(=0) #> inertia     -0.032508  0.077037 -0.421983   0.6730 0.9015 #> reciprocity  0.018287  0.071630  0.255305   0.7985 0.9064 #> Null deviance: 2.772589 on 100 degrees of freedom #> Residual deviance: 277.0551 on 98 degrees of freedom #> Chi-square: -274.2826 on 2 degrees of freedom, asymptotic p-value 1  #> AIC: 281.0551 AICC: 281.1789 BIC: 286.2655"},{"path":"https://tilburgnetworkgroup.github.io/remstimate/reference/bic.html","id":null,"dir":"Reference","previous_headings":"","what":"bic — bic","title":"bic — bic","text":"function returns BIC (Bayesian Information Criterion) value 'remstimate' object.","code":""},{"path":"https://tilburgnetworkgroup.github.io/remstimate/reference/bic.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"bic — bic","text":"","code":"bic(object, ...)  # S3 method for remstimate bic(object, ...)"},{"path":"https://tilburgnetworkgroup.github.io/remstimate/reference/bic.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"bic — bic","text":"object remstimate object. ... arguments passed 'bic' method.","code":""},{"path":"https://tilburgnetworkgroup.github.io/remstimate/reference/bic.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"bic — bic","text":"BIC value 'remstimate' object.","code":""},{"path":"https://tilburgnetworkgroup.github.io/remstimate/reference/bic.html","id":"methods-by-class-","dir":"Reference","previous_headings":"","what":"Methods (by class)","title":"bic — bic","text":"bic(remstimate): BIC (Bayesian Information Criterion) value 'remstimate' object","code":""},{"path":"https://tilburgnetworkgroup.github.io/remstimate/reference/bic.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"bic — bic","text":"","code":"# ------------------------------------ # #       tie-oriented model: \"MLE\"      # # ------------------------------------ #  # loading data data(tie_data)  # processing event sequence with remify tie_reh <- remify::remify(edgelist = tie_data$edgelist, model = \"tie\")    # specifying linear predictor tie_model <- ~ 1 +                 remstats::indegreeSender()+                remstats::inertia()+                remstats::reciprocity()   # calculating statistics tie_reh_stats <- remstats::remstats(reh = tie_reh,                                      tie_effects = tie_model)  # running estimation tie_mle <- remstimate::remstimate(reh = tie_reh,                                   stats = tie_reh_stats,                                   method = \"MLE\",                                   ncores = 1)  # BIC bic(tie_mle)  #> [1] 1229.045"},{"path":"https://tilburgnetworkgroup.github.io/remstimate/reference/diagnostics.html","id":null,"dir":"Reference","previous_headings":"","what":"Compute the diagnostics of a remstimate object — diagnostics","title":"Compute the diagnostics of a remstimate object — diagnostics","text":"function returns diagnostics remstimate object. output object method diagnostics contains residuals model estimated remstimate object, event rates estimated model tiem point. tie-oriented modeling frameworks object contains: list residuals two objects, standardized_residuals containing standardized Schoenfeld's residuals (Schoenfeld, D., 1982, <doi:10.2307/2335876>; Grambsch, P. M., & Therneau, T. M., 1994, <doi:10.2307/2337123>; Winnett, ., & Sasieni, P., 2001, <jstor.org/stable/2673500>), smoothing_weights (matrix weights used red smooth splines plot residuals), array structure rates event rates estimated optimized model parameters, .reh.processed pseudo-hidden object containing processed remify object helps speed plotting function plot.remstimate user supposed modify. actor-oriented modeling frameworks, diagnostics output two main list objects named sender_model receiver_model. selecting model, structure diagnostics tie-oriented model. model's diagnostics (sender receiver) available corresponding model found remstimate object.","code":""},{"path":"https://tilburgnetworkgroup.github.io/remstimate/reference/diagnostics.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Compute the diagnostics of a remstimate object — diagnostics","text":"","code":"diagnostics(object, reh, stats, ...)  # S3 method for remstimate diagnostics(object, reh, stats, ...)"},{"path":"https://tilburgnetworkgroup.github.io/remstimate/reference/diagnostics.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Compute the diagnostics of a remstimate object — diagnostics","text":"object remstimate object. reh remify object, used 'remstimate' object. stats remstats object, used 'remstimate' object. ... arguments passed 'diagnostics' method.","code":""},{"path":"https://tilburgnetworkgroup.github.io/remstimate/reference/diagnostics.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Compute the diagnostics of a remstimate object — diagnostics","text":"object class \"diagnostics\" \"remstimate\" standardized Schoenfeld's residuals estimated event rates given optimized model parameters.","code":""},{"path":"https://tilburgnetworkgroup.github.io/remstimate/reference/diagnostics.html","id":"methods-by-class-","dir":"Reference","previous_headings":"","what":"Methods (by class)","title":"Compute the diagnostics of a remstimate object — diagnostics","text":"diagnostics(remstimate): diagnostics 'remstimate' object","code":""},{"path":"https://tilburgnetworkgroup.github.io/remstimate/reference/diagnostics.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Compute the diagnostics of a remstimate object — diagnostics","text":"","code":"# ------------------------------------ # #       tie-oriented model: \"MLE\"      # # ------------------------------------ #  # loading data data(tie_data)  # processing event sequence with remify tie_reh <- remify::remify(edgelist = tie_data$edgelist, model = \"tie\")    # specifying linear predictor tie_model <- ~ 1 +                 remstats::indegreeSender()+                remstats::inertia()+                remstats::reciprocity()   # calculating statistics tie_reh_stats <- remstats::remstats(reh = tie_reh,                                      tie_effects = tie_model)  # running estimation tie_mle <- remstimate::remstimate(reh = tie_reh,                                   stats = tie_reh_stats,                                   method = \"MLE\",                                   ncores = 1)  # diagnostics tie_diagnostics <- diagnostics(object = tie_mle, reh = tie_reh, stats = tie_reh_stats) names(tie_diagnostics) #> [1] \"residuals\"      \"rates\"          \".reh.processed\""},{"path":"https://tilburgnetworkgroup.github.io/remstimate/reference/plot.remstimate.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot diagnostics of a remstimate object — plot.remstimate","title":"Plot diagnostics of a remstimate object — plot.remstimate","text":"function returns plot diagnostics given 'remstimate' object depending 'approach' attribute.","code":""},{"path":"https://tilburgnetworkgroup.github.io/remstimate/reference/plot.remstimate.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot diagnostics of a remstimate object — plot.remstimate","text":"","code":"# S3 method for remstimate plot(   x,   reh,   diagnostics = NULL,   which = c(1:4),   effects = NULL,   sender_effects = NULL,   receiver_effects = NULL,   ... )"},{"path":"https://tilburgnetworkgroup.github.io/remstimate/reference/plot.remstimate.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot diagnostics of a remstimate object — plot.remstimate","text":"x remstimate object. reh remify object, used remstimate object. diagnostics 'diagnostics' 'remstimate' object. one numbers 1 2. Plots described order: (1) two plots: Q-Q plot waiting times theoretical quantiles (Exponential distribution rate 1) plotted observed quantiles (calculated multiplication time point sum event rates corresponding waiting time, distributed exponential rate 1). Next q-q plot, density plot rescaled waiting times (red) vs. theoretical distribution (exponential distribution rate 1, black). observed density truncated 99th percentile waiting times, (2) standardized Schoenfeld's residuals (per variable model, excluding baseline) smoothed weighted spline (line red). Schoenfeld's residuals help understand potential presence time dependence effects statistics specified model, (3) distributions posterior draws histograms (BSIR HMC method), (4) trace plots posterior draws thinning (HMC method). effects [optional] tie-oriented modeling (model =  \"tie\"), names statistics user wants plot diagnostics (default value set statistics available inside object 'diagnostics'). user can specify argument standardized Schoenfeld's residuals (= 2), histograms posterior distributions (= 3) trace plots (= 4). Default value NULL, selecting effects available 'remstimate' object. sender_effects [optional] actor-oriented modeling (model =  \"actor\"), names statistics sender model user wants plot diagnostics (default value set statistics available inside object 'diagnostics'). user can specify argument standardized Schoenfeld's residuals (= 2), histograms posterior distributions (= 3) trace plots (= 4). user wants plot diagnostics one effects sender model time wants exclude plots receiver model, set argument receiver_effects = NA specify vector effects sender_effects (leave sender_effects = NULL selecting effects sender model). Default value NULL, selecting effects available sender model 'remstimate' object. receiver_effects [optional] actor-oriented modeling (model =  \"actor\"), names statistics receiver model user wants plot diagnostics (default value set statistics available inside object 'diagnostics'). user can specify argument standardized Schoenfeld's residuals (= 2), histograms posterior distributions (= 3) trace plots (= 4). user wants plot diagnostics one effects receiver model time wants exclude plots sender model, set argument sender_effects = NA specify vector effects receiver_effects (leave receiver_effects = NULL selecting effects receiver model). Default value NULL, selecting effects available receiver model 'remstimate' object (x). ... arguments passed 'plot' method, instance, remstats object statistics ('stats') object 'diagnostics' supplied.","code":""},{"path":"https://tilburgnetworkgroup.github.io/remstimate/reference/plot.remstimate.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plot diagnostics of a remstimate object — plot.remstimate","text":"return value. function plots diagnostics 'remstimate' object.","code":""},{"path":"https://tilburgnetworkgroup.github.io/remstimate/reference/plot.remstimate.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Plot diagnostics of a remstimate object — plot.remstimate","text":"","code":"# ------------------------------------ # #       tie-oriented model: \"MLE\"      # # ------------------------------------ #  # loading data data(tie_data)  # processing event sequence with remify tie_reh <- remify::remify(edgelist = tie_data$edgelist, model = \"tie\")    # specifying linear predictor tie_model <- ~ 1 +                 remstats::indegreeSender()+                remstats::inertia()+                remstats::reciprocity()   # calculating statistics tie_reh_stats <- remstats::remstats(reh = tie_reh,                                      tie_effects = tie_model)  # running estimation tie_mle <- remstimate::remstimate(reh = tie_reh,                                   stats = tie_reh_stats,                                   method = \"MLE\",                                   ncores = 1)  # diagnostics tie_diagnostics <- diagnostics(object = tie_mle, reh = tie_reh, stats = tie_reh_stats)  # plot plot(x = tie_mle, reh  = tie_reh, diagnostics = tie_diagnostics)"},{"path":"https://tilburgnetworkgroup.github.io/remstimate/reference/print.remstimate.html","id":null,"dir":"Reference","previous_headings":"","what":"Print out a quick overview of a remstimate object — print.remstimate","title":"Print out a quick overview of a remstimate object — print.remstimate","text":"function prints estimates returned 'remstimate' object.","code":""},{"path":"https://tilburgnetworkgroup.github.io/remstimate/reference/print.remstimate.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Print out a quick overview of a remstimate object — print.remstimate","text":"","code":"# S3 method for remstimate print(x, ...)"},{"path":"https://tilburgnetworkgroup.github.io/remstimate/reference/print.remstimate.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Print out a quick overview of a remstimate object — print.remstimate","text":"x remstimate object. ... arguments passed print method.","code":""},{"path":"https://tilburgnetworkgroup.github.io/remstimate/reference/print.remstimate.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Print out a quick overview of a remstimate object — print.remstimate","text":"return value. Prints main characteristics 'remstimate' object.","code":""},{"path":"https://tilburgnetworkgroup.github.io/remstimate/reference/print.remstimate.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Print out a quick overview of a remstimate object — print.remstimate","text":"","code":"# ------------------------------------ # #       method 'print' for the         # #       tie-oriented model: \"BSIR\"     # # ------------------------------------ #  # loading data data(tie_data)  # processing event sequence with remify tie_reh <- remify::remify(edgelist = tie_data$edgelist, model = \"tie\")    # specifying linear predictor tie_model <- ~ 1 +                 remstats::indegreeSender()+                remstats::inertia()+                remstats::reciprocity()   # calculating statistics tie_reh_stats <- remstats::remstats(reh = tie_reh,                                      tie_effects = tie_model)  # running estimation tie_mle <- remstimate::remstimate(reh = tie_reh,                                   stats = tie_reh_stats,                                   method = \"BSIR\",                                   nsim = 100,                                   ncores = 1)  # print tie_mle #> Relational Event Model (tie oriented)  #>  #> Posterior Modes: #>  #>       baseline indegreeSender        inertia    reciprocity  #>    -4.94474683     0.06081207    -0.24980370    -0.07232806   # ------------------------------------ # #      method 'print' for the          # #      actor-oriented model: \"BSIR\"    # # ------------------------------------ #  # loading data data(ao_data)  # processing event sequence with remify ao_reh <- remify::remify(edgelist = ao_data$edgelist, model = \"actor\")    # specifying linear predictor (for sender rate and receiver choice model) rate_model <- ~ 1 + remstats::indegreeSender() choice_model <- ~ remstats::inertia() + remstats::reciprocity()  # calculating statistics ao_reh_stats <- remstats::remstats(reh = ao_reh,                                     sender_effects = rate_model,                                     receiver_effects = choice_model)  # running estimation ao_mle <- remstimate::remstimate(reh = ao_reh,                                  stats = ao_reh_stats,                                  method = \"BSIR\",                                  nsim = 100,                                  ncores = 1)  # print ao_mle #> Relational Event Model (actor oriented)  #>  #> Posterior Modes rate model **for sender**: #>  #>       baseline indegreeSender  #>   -4.821751052   -0.007672502  #>  #> -------------------------------------------------------------------------------- #>  #> Posterior Modes choice model **for sender**: #>  #>     inertia reciprocity  #>  -0.0329211   0.0155800   # ------------------------------------ # #   for more examples check vignettes  # # ------------------------------------ #"},{"path":"https://tilburgnetworkgroup.github.io/remstimate/reference/remstimate-package.html","id":null,"dir":"Reference","previous_headings":"","what":"remstimate: Optimization Frameworks for Tie-Oriented and Actor-Oriented Relational Event Models — remstimate-package","title":"remstimate: Optimization Frameworks for Tie-Oriented and Actor-Oriented Relational Event Models — remstimate-package","text":"comprehensive set tools designed optimizing likelihood within tie-oriented (Butts, C., 2008, doi:10.1111/j.1467-9531.2008.00203.x ) actor-oriented modelling framework (Stadtfeld, C., & Block, P., 2017, doi:10.15195/v4.a14 ) relational event networks. package accommodates frequentist Bayesian approaches. frequentist approaches package incorporates Maximum Likelihood Optimization (MLE) Gradient-based Optimization (GDADAMAX). Bayesian methodologies included package Bayesian Sampling Importance Resampling (BSIR) Hamiltonian Monte Carlo (HMC). flexibility choosing frequentist Bayesian optimization approaches allows researchers select estimation approach aligns analytical preferences.","code":""},{"path":[]},{"path":"https://tilburgnetworkgroup.github.io/remstimate/reference/remstimate-package.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"remstimate: Optimization Frameworks for Tie-Oriented and Actor-Oriented Relational Event Models — remstimate-package","text":"Maintainer: Giuseppe Arena g.arena@tilburguniversity.edu (ORCID) Authors: Rumana Lakdawala r.j.lakdawala@tilburguniversity.edu Fabio Generoso Vieira f.v.generosovieira@tilburguniversity.edu contributors: Marlyne Meijerink-Bosman m.l.meijerink@tilburguniversity.edu [contributor] Diana Karimova d.karimova@tilburguniversity.edu [contributor] Mahdi Shafiee Kamalabad m.shafieekamalabad@uu.nl [contributor] Roger Leenders r.t..j.leenders@tilburguniversity.edu [contributor] Joris Mulder j.mulder3@tilburguniversity.edu [contributor]","code":""},{"path":"https://tilburgnetworkgroup.github.io/remstimate/reference/remstimate.html","id":null,"dir":"Reference","previous_headings":"","what":"remstimate - optimization of tie-oriented and actor-oriented likelihood — remstimate","title":"remstimate - optimization of tie-oriented and actor-oriented likelihood — remstimate","text":"function optimization tie-oriented actor-oriented likelihood. four optimization algorithms: two Frequentists, Maximum Likelihood Estimation (MLE) Adaptive Gradient Descent (GDADAMAX), two Bayesian, Bayesian Sampling Importance Resampling (BSIR) Hamiltonian Monte Carlo (HMC).","code":""},{"path":"https://tilburgnetworkgroup.github.io/remstimate/reference/remstimate.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"remstimate - optimization of tie-oriented and actor-oriented likelihood — remstimate","text":"","code":"remstimate(   reh,   stats,   method = c(\"MLE\", \"GDADAMAX\", \"BSIR\", \"HMC\"),   ncores = attr(reh, \"ncores\"),   prior = NULL,   nsim = 1000L,   nchains = 1L,   burnin = 500L,   thin = 10L,   init = NULL,   epochs = 1000L,   L = 50L,   epsilon = ifelse(method == \"GDADAMAX\", 0.001, 0.002),   seed = NULL,   WAIC = FALSE,   silent = TRUE,   ... )"},{"path":"https://tilburgnetworkgroup.github.io/remstimate/reference/remstimate.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"remstimate - optimization of tie-oriented and actor-oriented likelihood — remstimate","text":"reh remify object processed relational event history. Output object function remify::remify(). stats remstats object: `attr(reh,\"model\")` `\"tie\"`, stats array statistics dimensions [M x D x P]: M number events, D number possible dyads (full riskset), P number statistics; `attr(reh,\"model\")` `\"actor\"`, stats list can contain two arrays named \"sender_stats\" \"receiver_stats\" dimensions [M x N x P], N actors (senders array \"sender_stats\", receivers array \"receiver_stats\"). Furthermore, possible estimate sender rate model receiver choice model, using correct naming arrays. method optimization method estimate model parameters. Methods available : Maximum Likelihood Estimation (\"MLE\", also default method), Adaptive Gradient Descent (\"GDADAMAX\") based work Diederik P. Kingma Jimmy Ba, 2014 (<doi:10.48550/arXiv.1412.6980>), Bayesian Sampling Importance Resampling (\"BSIR\"), Hamiltonian Monte Carlo (\"HMC\"). (default method \"MLE\"). ncores [optional] number threads parallelization. (default value 1, means parallelization). prior [optional] prior distribution method \"BSIR\". Default value NULL, means prior assumed. tie-oriented modeling, argument prior name function format name_package::name_density_function. parameters prior distribution can supplied inputs remstimate function (e.g., remstimate::remstimate(reh=reh,stats=stats,method=\"BSIR\",ncores=5,prior=mvnfast::dmvn,mu=rep(0,3),sigma=diag(3)*2,log=TRUE) ). actor-oriented modeling argument prior named list two objects \"sender_model\", calls prior function sender rate model, , \"receiver_model\", calls prior function receiver choice model. specification prior parameters, user must define optional argument called prior_args, also named list (names \"sender_model\" \"receiver_model\"): list list objects named prior arguments value prior argument (e.g., prior_args$sender_model = list(mu = rep(1.5,3), sigma = diag(3)*0.5, log = TRUE)). Finally, tie-oriented actor-oriented modeling prior functions must argument returns value density logarithmic scale (.e., log=TRUE). log=TRUE already set internally remstimate(). nsim [optional] method \"HMC\", nsim number simulations (iterations) chain, method \"BSIR\", nsim number samples proposal distribution. Default value 1000. nchains [optional] number chains generate case method = \"HMC\". Default value 1. burnin [optional] number initial iterations added burnin method = \"HMC\". Default value 500. thin [optional] number steps skip posterior draws method = \"HMC\". Default value 10. nsim<100, thin set 1. init [optional] vector initial values tie-oriented model, named list two vectors ('sender_model' 'receiver_model') models actor-oriented framework specified. init can also list one vector (named 'sender_model' 'receiver_model'), interest estimate one specific model actor-oriented framework. init used methods \"GDADAMAX\" \"HMC\". init NULL, assigned internally. epochs [optional] number iteration used method \"GDADAMAX\". Default value 1000. L [optional] number leap-frog steps use method \"HMC\". Default value 50. epsilon [optional] parameter used two methods: method \"GDADAMAX\", represents inter-iteration difference loss function used stop-rule within algorithm (default value 0.001), method \"HMC\" (default value 0.002), parameter used leap-frog algorithm proportional step size. seed [optional] seed value reproducibility. NULL, seed assigned machine saved output object. WAIC [optional] logical value. Watanabe Akaike's Information Criterion (WAIC) calculated WAIC = TRUE. default number simulations used calculate WAIC 500. order specify  different number simulations, user must supply additional argument nsimWAIC function. silent [optional--yet-implemented] TRUE/FALSE value. FALSE, progress optimization status printed . ... additional parameters. can parameters functions defined input arguments . (e.g., arguments prior distribution)","code":""},{"path":"https://tilburgnetworkgroup.github.io/remstimate/reference/remstimate.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"remstimate - optimization of tie-oriented and actor-oriented likelihood — remstimate","text":"'remstimate' S3 object.","code":""},{"path":"https://tilburgnetworkgroup.github.io/remstimate/reference/remstimate.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"remstimate - optimization of tie-oriented and actor-oriented likelihood — remstimate","text":"","code":"# ------------------------------------ # #       tie-oriented model: \"MLE\"      # # ------------------------------------ #  # loading data data(tie_data)  # processing event sequence with remify tie_reh <- remify::remify(edgelist = tie_data$edgelist, model = \"tie\")    # specifying linear predictor tie_model <- ~ 1 +                 remstats::indegreeSender()+                remstats::inertia()+                remstats::reciprocity()   # calculating statistics tie_reh_stats <- remstats::remstats(reh = tie_reh,                                      tie_effects = tie_model)  # running estimation tie_mle <- remstimate::remstimate(reh = tie_reh,                                   stats = tie_reh_stats,                                   method = \"MLE\",                                   ncores = 1) # summary summary(tie_mle) #> Relational Event Model (tie oriented)  #>  #> Call: #> ~1 + remstats::indegreeSender() + remstats::inertia() + remstats::reciprocity() #>  #>  #> Coefficients (MLE with interval likelihood): #>  #>                  Estimate   Std. Err    z value Pr(>|z|) Pr(=0) #> baseline        -4.910454   0.187555 -26.181372   0.0000 <2e-16 #> indegreeSender   0.043490   0.036449   1.193170   0.2328 0.8307 #> inertia         -0.201506   0.088154  -2.285831   0.0223 0.4231 #> reciprocity     -0.052137   0.098237  -0.530728   0.5956 0.8968 #> Null deviance: 1216.739 on 100 degrees of freedom #> Residual deviance: 1210.625 on 96 degrees of freedom #> Chi-square: 6.11449 on 4 degrees of freedom, asymptotic p-value 0.1907597  #> AIC: 1218.625 AICC: 1219.046 BIC: 1229.045  # ------------------------------------ # #      actor-oriented model: \"MLE\"     # # ------------------------------------ #  # loading data data(ao_data)  # processing event sequence with remify ao_reh <- remify::remify(edgelist = ao_data$edgelist, model = \"actor\")    # specifying linear predictor (for sender rate and receiver choice model) rate_model <- ~ 1 + remstats::indegreeSender() choice_model <- ~ remstats::inertia() + remstats::reciprocity()  # calculating statistics ao_reh_stats <- remstats::remstats(reh = ao_reh,                                     sender_effects = rate_model,                                     receiver_effects = choice_model)  # running estimation ao_mle <- remstimate::remstimate(reh = ao_reh,                                  stats = ao_reh_stats,                                  method = \"MLE\",                                  ncores = 1) # summary summary(ao_mle) #> Relational Event Model (actor oriented)  #>  #> Call rate model **for sender**: #>  #> \t~1 + remstats::indegreeSender() #>  #>  #> Coefficients rate model (MLE with interval likelihood): #>  #>                   Estimate    Std. Err     z value Pr(>|z|) Pr(=0) #> baseline        -4.8062015   0.1832563 -26.2266709      0.0 <2e-16 #> indegreeSender  -0.0083633   0.0159467  -0.5244534      0.6 0.8971 #> Null deviance: 1177.625 on 100 degrees of freedom #> Residual deviance: 1177.348 on 98 degrees of freedom #> Chi-square: 0.2770484 on 2 degrees of freedom, asymptotic p-value 0.8706422  #> AIC: 1181.348 AICC: 1181.472 BIC: 1186.558 #> --------------------------------------------------------------------------------  #>  #> Call choice model **for receiver**: #>  #> \t~remstats::inertia() + remstats::reciprocity() #>  #>  #> Coefficients choice model (MLE with interval likelihood): #>  #>              Estimate  Std. Err   z value Pr(>|z|) Pr(=0) #> inertia     -0.032508  0.077037 -0.421983   0.6730 0.9015 #> reciprocity  0.018287  0.071630  0.255305   0.7985 0.9064 #> Null deviance: 2.772589 on 100 degrees of freedom #> Residual deviance: 277.0551 on 98 degrees of freedom #> Chi-square: -274.2826 on 2 degrees of freedom, asymptotic p-value 1  #> AIC: 281.0551 AICC: 281.1789 BIC: 286.2655  # ------------------------------------ # #   for more examples check vignettes  # # ------------------------------------ #"},{"path":"https://tilburgnetworkgroup.github.io/remstimate/reference/summary.remstimate.html","id":null,"dir":"Reference","previous_headings":"","what":"Generate the summary of a remstimate object — summary.remstimate","title":"Generate the summary of a remstimate object — summary.remstimate","text":"function returns summary remstimate object.","code":""},{"path":"https://tilburgnetworkgroup.github.io/remstimate/reference/summary.remstimate.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generate the summary of a remstimate object — summary.remstimate","text":"","code":"# S3 method for remstimate summary(object, ...)"},{"path":"https://tilburgnetworkgroup.github.io/remstimate/reference/summary.remstimate.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generate the summary of a remstimate object — summary.remstimate","text":"object remstimate object. ... arguments passed 'summary' method.","code":""},{"path":"https://tilburgnetworkgroup.github.io/remstimate/reference/summary.remstimate.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Generate the summary of a remstimate object — summary.remstimate","text":"return value. Prints summary 'remstimate' object. output can save list, contains information printed summary method.","code":""},{"path":"https://tilburgnetworkgroup.github.io/remstimate/reference/summary.remstimate.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Generate the summary of a remstimate object — summary.remstimate","text":"","code":"# ------------------------------------ # #       method 'summary' for the       # #       tie-oriented model: \"BSIR\"     # # ------------------------------------ #  # loading data data(tie_data)  # processing event sequence with remify tie_reh <- remify::remify(edgelist = tie_data$edgelist, model = \"tie\")    # specifying linear predictor tie_model <- ~ 1 +                 remstats::indegreeSender()+                remstats::inertia()+                remstats::reciprocity()   # calculating statistics tie_reh_stats <- remstats::remstats(reh = tie_reh,                                      tie_effects = tie_model)  # running estimation tie_mle <- remstimate::remstimate(reh = tie_reh,                                   stats = tie_reh_stats,                                   method = \"BSIR\",                                   nsim = 100,                                   ncores = 1)  # summary summary(tie_mle) #> Relational Event Model (tie oriented)  #>  #> Call: #> ~1 + remstats::indegreeSender() + remstats::inertia() + remstats::reciprocity() #>  #>  #> Posterior Modes (BSIR with interval likelihood): #>  #>                Post.Mode   Post.SD     Q2.5%      Q50%  Q97.5% Pr(=0|x) #> baseline       -4.897778  0.183923 -5.316886 -4.936618 -4.5706   <2e-16 #> indegreeSender  0.052239  0.033067 -0.018439  0.049102  0.1094   0.7417 #> inertia        -0.209489  0.081257 -0.369031 -0.222512 -0.0413   0.2649 #> reciprocity    -0.065317  0.096046 -0.227090 -0.059380  0.1212   0.8881 #> Log posterior: -605.4761  # ------------------------------------ # #      method 'summary' for the        # #      actor-oriented model: \"BSIR\"    # # ------------------------------------ #  # loading data data(ao_data)  # processing event sequence with remify ao_reh <- remify::remify(edgelist = ao_data$edgelist, model = \"actor\")    # specifying linear predictor (for sender rate and receiver choice model) rate_model <- ~ 1 + remstats::indegreeSender() choice_model <- ~ remstats::inertia() + remstats::reciprocity()  # calculating statistics ao_reh_stats <- remstats::remstats(reh = ao_reh,                                     sender_effects = rate_model,                                     receiver_effects = choice_model)  # running estimation ao_mle <- remstimate::remstimate(reh = ao_reh,                                  stats = ao_reh_stats,                                  method = \"BSIR\",                                  nsim = 100,                                  ncores = 1)  # summary summary(ao_mle) #> Relational Event Model (actor oriented)  #>  #> Call rate model **for sender**: #>  #> \t~1 + remstats::indegreeSender() #>  #>  #> Posterior Modes rate model (BSIR with interval likelihood): #>  #>                 Post.Mode    Post.SD      Q2.5%       Q50%  Q97.5% Pr(=0|x) #> baseline       -4.8033053  0.1810062 -5.1223591 -4.7889548 -4.4948   <2e-16 #> indegreeSender -0.0088236  0.0148676 -0.0426069 -0.0075654  0.0181   0.8934 #> Log posterior: -588.6746 #> --------------------------------------------------------------------------------  #>  #> Call choice model **for receiver**: #>  #> \t~remstats::inertia() + remstats::reciprocity() #>  #>  #> Posterior Modes choice model (BSIR with interval likelihood): #>  #>             Post.Mode   Post.SD     Q2.5%      Q50% Q97.5% Pr(=0|x) #> inertia     -0.033359  0.074446 -0.191048 -0.039993 0.1168   0.9004 #> reciprocity  0.028577  0.071405 -0.102392  0.031216 0.1512   0.9023 #> Log posterior: -138.5382  # ------------------------------------ # #   for more examples check vignettes  # # ------------------------------------ #"},{"path":"https://tilburgnetworkgroup.github.io/remstimate/reference/tie_data.html","id":null,"dir":"Reference","previous_headings":"","what":"Tie-Oriented Relational Event History — tie_data","title":"Tie-Oriented Relational Event History — tie_data","text":"randomly generated sequence relational events 5 actors 100 events. event sequence generated following tie-oriented modeling approach (information run console help(topic = remulateTie, package = \"remulate\") ?remulate::remulateTie).","code":""},{"path":"https://tilburgnetworkgroup.github.io/remstimate/reference/tie_data.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Tie-Oriented Relational Event History — tie_data","text":"","code":"data(tie_data)"},{"path":"https://tilburgnetworkgroup.github.io/remstimate/reference/tie_data.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Tie-Oriented Relational Event History — tie_data","text":"tie_data list object containing following objects: edgelist data.frame raw simulated edgelist. columns data.frame : time timestamp indicating time event occurred actor1 actor generated relational event actor2 actor received relational event seed seed value used remulate::remulateTie() generating event sequence true.pars vector containing values parameters used generation event sequence","code":""},{"path":"https://tilburgnetworkgroup.github.io/remstimate/reference/tie_data.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Tie-Oriented Relational Event History — tie_data","text":"","code":"# (1) load the data into the workspace data(tie_data)  # (2) process event sequence with \\code{remify} tie_reh <- remify::remify(edgelist = tie_data$edgelist, model = \"tie\")  # (3) define linear predictor and claculate stastistcs with \\code{remstats} package  ## linear predictor tie_model <- ~ 1 + remstats::indegreeSender() + remstats::inertia() + remstats::reciprocity()   ## calculate statistics tie_reh_stats <- remstats::remstats(reh = tie_reh, tie_effects = tie_model)  # (4) estimate model using method = \"MLE\" and print out summary  ## estimate model  mle_tie <- remstimate::remstimate(reh = tie_reh, stats = tie_reh_stats, method = \"MLE\")  ## print out a summary of the estimation summary(mle_tie) #> Relational Event Model (tie oriented)  #>  #> Call: #> ~1 + remstats::indegreeSender() + remstats::inertia() + remstats::reciprocity() #>  #>  #> Coefficients (MLE with interval likelihood): #>  #>                  Estimate   Std. Err    z value Pr(>|z|) Pr(=0) #> baseline        -4.910454   0.187555 -26.181372   0.0000 <2e-16 #> indegreeSender   0.043490   0.036449   1.193170   0.2328 0.8307 #> inertia         -0.201506   0.088154  -2.285831   0.0223 0.4231 #> reciprocity     -0.052137   0.098237  -0.530728   0.5956 0.8968 #> Null deviance: 1216.739 on 100 degrees of freedom #> Residual deviance: 1210.625 on 96 degrees of freedom #> Chi-square: 6.11449 on 4 degrees of freedom, asymptotic p-value 0.1907597  #> AIC: 1218.625 AICC: 1219.046 BIC: 1229.045"},{"path":"https://tilburgnetworkgroup.github.io/remstimate/reference/waic.html","id":null,"dir":"Reference","previous_headings":"","what":"waic — waic","title":"waic — waic","text":"function returns WAIC (Watanabe-Akaike's Information Criterion) value 'remstimate' object.","code":""},{"path":"https://tilburgnetworkgroup.github.io/remstimate/reference/waic.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"waic — waic","text":"","code":"waic(object, ...)  # S3 method for remstimate waic(object, ...)"},{"path":"https://tilburgnetworkgroup.github.io/remstimate/reference/waic.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"waic — waic","text":"object remstimate object. ... arguments passed 'waic' method.","code":""},{"path":"https://tilburgnetworkgroup.github.io/remstimate/reference/waic.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"waic — waic","text":"WAIC value 'remstimate' object.","code":""},{"path":"https://tilburgnetworkgroup.github.io/remstimate/reference/waic.html","id":"methods-by-class-","dir":"Reference","previous_headings":"","what":"Methods (by class)","title":"waic — waic","text":"waic(remstimate): WAIC (Watanabe-Akaike's Information Criterion) value 'remstimate' object","code":""},{"path":"https://tilburgnetworkgroup.github.io/remstimate/reference/waic.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"waic — waic","text":"","code":"# No examples available at the moment"},{"path":"https://tilburgnetworkgroup.github.io/remstimate/news/index.html","id":"remstimate-2311","dir":"Changelog","previous_headings":"","what":"remstimate 2.3.11","title":"remstimate 2.3.11","text":"minor fixes implicit conversions","code":""},{"path":"https://tilburgnetworkgroup.github.io/remstimate/news/index.html","id":"remstimate-2310","dir":"Changelog","previous_headings":"","what":"remstimate 2.3.10","title":"remstimate 2.3.10","text":"minor fix switch function boolean type (remstimate.cpp).","code":""},{"path":"https://tilburgnetworkgroup.github.io/remstimate/news/index.html","id":"remstimate-239","dir":"Changelog","previous_headings":"","what":"remstimate 2.3.9","title":"remstimate 2.3.9","text":"CRAN release: 2024-05-13 minor fix titles Schoenfeld’s residuals plots; correction learning rate parameter “GDADAMAX” method.","code":""},{"path":"https://tilburgnetworkgroup.github.io/remstimate/news/index.html","id":"remstimate-238","dir":"Changelog","previous_headings":"","what":"remstimate 2.3.8","title":"remstimate 2.3.8","text":"CRAN release: 2023-12-20 DESCRIPTION file, removed quotes acronyms; documentation (return values added missing); tests (removed test ‘ncores’ argument); vignette (switched ‘html_document’, edited seed value parameters \"HMC\" method). . # remstimate 2.3.7 (initial CRAN release) trace plot posterior draws (via \"HMC\" method) highest posterior density intervals; histograms posterior draws (\"BSIR\" \"HMC\" method) highest posterior density intervals; content summary.remstimate() can saved assigning variable; Watanabe-Akaike’s Information Criterion (WAIC) calculation available. New argument, logical value, WAIC, default FALSE. WAIC=TRUE, optional argument nsimWAIC (number draws estimate WAIC) set default 500 (user can supply different value); updated parallelization routines computation likelihood, gradient hessian actor-oriented modeling framework; updated parallelization routines computing model residuals WAIC; added new tests, increased coverage.","code":""},{"path":"https://tilburgnetworkgroup.github.io/remstimate/news/index.html","id":"remstimate-236---231","dir":"Changelog","previous_headings":"","what":"remstimate 2.3.6 - 2.3.1","title":"remstimate 2.3.6 - 2.3.1","text":"several minor updates initial CRAN release remstimate 2.3.7.","code":""},{"path":"https://tilburgnetworkgroup.github.io/remstimate/news/index.html","id":"remstimate-230","dir":"Changelog","previous_headings":"","what":"remstimate 2.3.0","title":"remstimate 2.3.0","text":"Simultaneous events supported (likelihood functions adapted).","code":""},{"path":"https://tilburgnetworkgroup.github.io/remstimate/news/index.html","id":"remstimate-220","dir":"Changelog","previous_headings":"","what":"remstimate 2.2.0:","title":"remstimate 2.2.0:","text":"major updates Rcpp functions; now using tinytest testing (tests converted testthat); new examples functions package; remove Rcpp functions (emp_dist_longest_batch(), tuning L parameter \"HMC\" method); vignette created actor-oriented modeling framework.","code":""},{"path":"https://tilburgnetworkgroup.github.io/remstimate/news/index.html","id":"remstimate-210","dir":"Changelog","previous_headings":"","what":"remstimate 2.1.0:","title":"remstimate 2.1.0:","text":"new remstimate logo; update functions’ description; removed input argument model; initial controls input argument; output structure; \"HMC\" actor-oriented framework; added initial values \"HMC\" method (experimental); new experimental Rcpp function set_seed; input argument edgelist changed dyad; new input arguments actor1 actor2 (actor-oriented routines); removed old Rcpp functions: getDyadIndex(), getDyadComposition(); added dependency exported C++ routines remify, using now remify::getDyadIndex() remify::getDyadComposition(); added new tests using testthat. Tests divided multiple .R scripts depending tested; update summary print actor-oriented framework summary.remstimate; predict.remstimate plot.remstimate function yet available; added dependencies: remify remstats; added data tie-oriented actor-oriented examples; new README.md badges.","code":""},{"path":"https://tilburgnetworkgroup.github.io/remstimate/news/index.html","id":"remstimate-200","dir":"Changelog","previous_headings":"","what":"remstimate 2.0.0:","title":"remstimate 2.0.0:","text":"version adapted latest changes coming remify 2.0.0 can estimate Tie-Oriented model well Actor-Oriented model. Models can estimated means different methods: \"MLE\", \"GDADAMAX\" (replacing former \"GD\" \"GDADAM\"), \"BSIR\" \"HMC\". Methods like \"BSIR\" \"HMC\" ready--use still continuous development order improve user-experience; removed experimental “fast method” compute likelihood; added dependencies trust parallel; experimental Rcpp functions posteriorRank() remDerivativesStandard_lambdas() (added finally removed version 2.0.0); added new Rcpp functions: getDyadIndex(), getDyadComposition().","code":""},{"path":"https://tilburgnetworkgroup.github.io/remstimate/news/index.html","id":"remstimate-100","dir":"Changelog","previous_headings":"","what":"remstimate 1.0.0:","title":"remstimate 1.0.0:","text":"Methods working function remstimate() : \"MLE\", \"GD\", \"GDADAM\", \"BSIR\", \"HMC\". However output lacks structure attributes methods; messages becomes Rcpp file. exstension appears suit better intent content/aim error warning messages; remstimate.R contains main function remstimate() aimed run either Frequentist Bayesian approach using different optimization/methods. also includes switch “fast method” compute likelihood. “fast method” run actual improvement (percentage improvement) higher threshold set user (default 0.5); reh.cpp : contains getRisksetMatrix(), getRisksetCube(), convertInputREH(), getBinaryREH() reh(). last function one preprocesses input given user consists : edgelist, riskset covariates. intereventTime variable covariates input still need preprocessed via specific utility functions; remstimate.cpp : contains remDerivatives() (returns value loglikelihood, gradient, hessian specific parameter value), lpd() (log-pointwise density), utility functions fast method (cube2matrix(), getUniqueVectors(), computeTimes(), computeOccurrencies()) run function remDerivativesFast(); Since compute_stats() exported function remstats, getStats.R / compute_stats.cpp / compute_stats.h temporary files calculate statistics, run estimation compare estimates relevent::rem(). getStats() alias remstats::remstats() modifications stage preprocessing network; reh() preprocessing function coded Rcpp (see reh.cpp file) whereas R function reh.R file removed; utility functions called inside reh() added inside reh.cpp file, reh() function ; messages.cpp becomes header file messages.h aim/content remains ; reh.h changed reh.cpp contains utility functions used reh.R within R function reh(...) ; messages.cpp contain functions errorMessage(cond) warningMessage(cond) return appropriate error/warning messages according cond argument; Created reh.h utility functions preprocess data developed; remstimateBoost.h contain routines speed computation loglikelihood first second derivatives; created repository first commit; package contains three functions: remCpp(...) (uses optim find maximum likelihood estimates REM), nllik(...) (returns negative log-likelihood value observed event sequence, specifying vector parameters statistics), lpd(...) (calculates nllik(...) specific time point without taking negative value).","code":""}]
